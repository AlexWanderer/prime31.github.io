<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[prime[31] blog - Unity tips, tricks and random thoughts]]></title>
  <link href="http://blog.prime31.com/atom.xml" rel="self"/>
  <link href="http://blog.prime31.com/"/>
  <updated>2015-10-13T17:24:32-07:00</updated>
  <id>http://blog.prime31.com/</id>
  <author>
    <name><![CDATA[Mike Desaro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using the Stencil Buffer for Sprite Occlusion]]></title>
    <link href="http://blog.prime31.com/stencil-buffer-occlusion"/>
    <updated>2015-10-13T00:19:16-07:00</updated>
    <id>http://blog.prime31.com/stencil-buffer-occlusion</id>
    <content type="html"><![CDATA[<p>Back in <a href="http://blog.prime31.com/SpriteLightKit/">the post</a> on SpriteLightKit, we talked about the stencil buffer and we left things off with a homework assignment. I also did the homework assignment and will be sharing the result that I came up with.</p>

<!-- more -->


<p>First, let&rsquo;s have a look at what the resulting shaders look like in action. We have one shader for the trees (occluders) and one for the player (occluded).</p>

<iframe src="http://gfycat.com/ifr/AdoredIndolentAmphiuma" frameborder="0" scrolling="no" width="790" height="405" style="-webkit-backface-visibility: hidden;-webkit-transform: scale(1);" ></iframe>


<p>The full shaders are available below. At first glance they might seem really daunting but in reality they are super, duper simple. For some reason, Unity makes us use shaders for accessing the stencil buffer so because of that we have a lot more code than is really required. Basically, all there is in these shaders below is the exact same sprite shader once for the occluder and twice for the occluded sprites and then our tiny stencil section on each. Lets ignore the sprite shader poration (since its just a plain old Unity default sprite shader for the most part) and have a look at the actual stencil portions.</p>

<p>First, the occluder sprites. Below is all of the code that actually matters for the stencil buffer. All it is doing is saying for every pixel we write to the color buffer lets replace the stencil buffer value with 4. So, in essence, anywhere there is an occluder pixel it will write 4 to the stencil buffer.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Stencil</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Ref</span> <span class="m">4</span>
</span><span class='line'>  <span class="n">Comp</span> <span class="n">Always</span>
</span><span class='line'>  <span class="n">Pass</span> <span class="n">Replace</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Occluded sprites need two passes (once for rendering the silhouette and one for rendering the non-occluded portation) so we will have two different stencil sections here. The first pass is going to render wherever the stencil buffer value is <em>not equal</em> to 4. So, anywhere that there is not an occluder the first pass will render. The second pass is exactly the opposite: wherever the stencil buffer value <em>is equal</em> to 4 it will render. When it renders it multiplies the output by a dark color to make a silhouette. That&rsquo;s all there is to it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// first pass</span>
</span><span class='line'><span class="n">Stencil</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Ref</span> <span class="m">4</span>
</span><span class='line'>  <span class="n">Comp</span> <span class="n">NotEqual</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// second pass</span>
</span><span class='line'><span class="n">Stencil</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Ref</span> <span class="m">4</span>
</span><span class='line'>  <span class="n">Comp</span> <span class="n">Equal</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Below is the full shader to be used for any occluder sprites.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Shader</span> <span class="s">&quot;Sprites/Occluder&quot;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Properties</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'><span class="na">     [PerRendererData]</span> <span class="n">_MainTex</span> <span class="p">(</span> <span class="s">&quot;Sprite Texture&quot;</span><span class="p">,</span> <span class="m">2D</span> <span class="p">)</span> <span class="p">=</span> <span class="s">&quot;white&quot;</span> <span class="p">{}</span>
</span><span class='line'>      <span class="n">_Color</span> <span class="p">(</span> <span class="s">&quot;Tint&quot;</span><span class="p">,</span> <span class="n">Color</span> <span class="p">)</span> <span class="p">=</span> <span class="p">(</span> <span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">1</span> <span class="p">)</span>
</span><span class='line'><span class="na">     [MaterialToggle]</span> <span class="n">PixelSnap</span> <span class="p">(</span> <span class="s">&quot;Pixel snap&quot;</span><span class="p">,</span> <span class="n">Float</span> <span class="p">)</span> <span class="p">=</span> <span class="m">0</span>
</span><span class='line'>      <span class="n">_AlphaCutoff</span> <span class="p">(</span> <span class="s">&quot;Alpha Cutoff&quot;</span><span class="p">,</span> <span class="n">Range</span><span class="p">(</span> <span class="m">0.01</span><span class="p">,</span> <span class="m">1.0</span> <span class="p">)</span> <span class="p">)</span> <span class="p">=</span> <span class="m">0.1</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="n">SubShader</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">Tags</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="s">&quot;Queue&quot;</span> <span class="p">=</span> <span class="s">&quot;Transparent&quot;</span>
</span><span class='line'>          <span class="s">&quot;IgnoreProjector&quot;</span> <span class="p">=</span> <span class="s">&quot;True&quot;</span>
</span><span class='line'>          <span class="s">&quot;RenderType&quot;</span> <span class="p">=</span> <span class="s">&quot;TransparentCutout&quot;</span>
</span><span class='line'>          <span class="s">&quot;PreviewType&quot;</span> <span class="p">=</span> <span class="s">&quot;Plane&quot;</span>
</span><span class='line'>          <span class="s">&quot;CanUseSpriteAtlas&quot;</span> <span class="p">=</span> <span class="s">&quot;True&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">Cull</span> <span class="n">Off</span>
</span><span class='line'>      <span class="n">Lighting</span> <span class="n">Off</span>
</span><span class='line'>      <span class="n">ZWrite</span> <span class="n">Off</span>
</span><span class='line'>      <span class="n">Blend</span> <span class="n">One</span> <span class="n">OneMinusSrcAlpha</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">Pass</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">Stencil</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">Ref</span> <span class="m">4</span>
</span><span class='line'>              <span class="n">Comp</span> <span class="n">Always</span>
</span><span class='line'>              <span class="n">Pass</span> <span class="n">Replace</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">CGPROGRAM</span>
</span><span class='line'>          <span class="cp">#pragma vertex vert</span>
</span><span class='line'>          <span class="cp">#pragma fragment frag</span>
</span><span class='line'>          <span class="cp">#pragma multi_compile _ PIXELSNAP_ON</span>
</span><span class='line'>          <span class="err">#</span><span class="n">include</span> <span class="s">&quot;UnityCG.cginc&quot;</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">struct</span> <span class="nc">appdata_t</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">float4</span> <span class="n">vertex</span>   <span class="p">:</span> <span class="n">POSITION</span><span class="p">;</span>
</span><span class='line'>              <span class="n">float4</span> <span class="n">color</span>    <span class="p">:</span> <span class="n">COLOR</span><span class="p">;</span>
</span><span class='line'>              <span class="n">float2</span> <span class="n">texcoord</span> <span class="p">:</span> <span class="n">TEXCOORD0</span><span class="p">;</span>
</span><span class='line'>          <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">struct</span> <span class="nc">v2f</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">float4</span> <span class="n">vertex</span>   <span class="p">:</span> <span class="n">SV_POSITION</span><span class="p">;</span>
</span><span class='line'>              <span class="n">fixed4</span> <span class="n">color</span>    <span class="p">:</span> <span class="n">COLOR</span><span class="p">;</span>
</span><span class='line'>              <span class="n">half2</span> <span class="n">texcoord</span>  <span class="p">:</span> <span class="n">TEXCOORD0</span><span class="p">;</span>
</span><span class='line'>          <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">fixed4</span> <span class="n">_Color</span><span class="p">;</span>
</span><span class='line'>          <span class="k">fixed</span> <span class="n">_AlphaCutoff</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">v2f</span> <span class="nf">vert</span><span class="p">(</span> <span class="n">appdata_t</span> <span class="n">IN</span> <span class="p">)</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">v2f</span> <span class="n">OUT</span><span class="p">;</span>
</span><span class='line'>              <span class="n">OUT</span><span class="p">.</span><span class="n">vertex</span> <span class="p">=</span> <span class="n">mul</span><span class="p">(</span> <span class="n">UNITY_MATRIX_MVP</span><span class="p">,</span> <span class="n">IN</span><span class="p">.</span><span class="n">vertex</span> <span class="p">);</span>
</span><span class='line'>              <span class="n">OUT</span><span class="p">.</span><span class="n">texcoord</span> <span class="p">=</span> <span class="n">IN</span><span class="p">.</span><span class="n">texcoord</span><span class="p">;</span>
</span><span class='line'>              <span class="n">OUT</span><span class="p">.</span><span class="n">color</span> <span class="p">=</span> <span class="n">IN</span><span class="p">.</span><span class="n">color</span> <span class="p">*</span> <span class="n">_Color</span><span class="p">;</span>
</span><span class='line'>              <span class="err">#</span><span class="n">ifdef</span> <span class="n">PIXELSNAP_ON</span>
</span><span class='line'>              <span class="n">OUT</span><span class="p">.</span><span class="n">vertex</span> <span class="p">=</span> <span class="n">UnityPixelSnap</span><span class="p">(</span> <span class="n">OUT</span><span class="p">.</span><span class="n">vertex</span> <span class="p">);</span>
</span><span class='line'>              <span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>              <span class="k">return</span> <span class="n">OUT</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">sampler2D</span> <span class="n">_MainTex</span><span class="p">;</span>
</span><span class='line'>          <span class="n">sampler2D</span> <span class="n">_AlphaTex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>          <span class="n">fixed4</span> <span class="nf">frag</span><span class="p">(</span> <span class="n">v2f</span> <span class="n">IN</span> <span class="p">)</span> <span class="p">:</span> <span class="n">SV_Target</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">fixed4</span> <span class="n">c</span> <span class="p">=</span> <span class="n">tex2D</span><span class="p">(</span> <span class="n">_MainTex</span><span class="p">,</span> <span class="n">IN</span><span class="p">.</span><span class="n">texcoord</span> <span class="p">)</span> <span class="p">*</span> <span class="n">IN</span><span class="p">.</span><span class="n">color</span><span class="p">;</span>
</span><span class='line'>              <span class="n">c</span><span class="p">.</span><span class="n">rgb</span> <span class="p">*=</span> <span class="n">c</span><span class="p">.</span><span class="n">a</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>              <span class="c1">// here we discard pixels below our _AlphaCutoff so the stencil buffer only gets written to</span>
</span><span class='line'>              <span class="c1">// where there are actual pixels returned. If the occluders are all tight meshes (such as solid rectangles)</span>
</span><span class='line'>              <span class="c1">// this is not necessary and a non-transparent shader would be a better fit.</span>
</span><span class='line'>              <span class="n">clip</span><span class="p">(</span> <span class="n">c</span><span class="p">.</span><span class="n">a</span> <span class="p">-</span> <span class="n">_AlphaCutoff</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>              <span class="k">return</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="n">ENDCG</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Below is the full shader to be used for any occluded sprites.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Shader</span> <span class="s">&quot;Sprites/Occluded&quot;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Properties</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'><span class="na">     [PerRendererData]</span> <span class="n">_MainTex</span> <span class="p">(</span> <span class="s">&quot;Sprite Texture&quot;</span><span class="p">,</span> <span class="m">2D</span> <span class="p">)</span> <span class="p">=</span> <span class="s">&quot;white&quot;</span> <span class="p">{}</span>
</span><span class='line'>      <span class="n">_Color</span> <span class="p">(</span> <span class="s">&quot;Tint&quot;</span><span class="p">,</span> <span class="n">Color</span> <span class="p">)</span> <span class="p">=</span> <span class="p">(</span> <span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">1</span> <span class="p">)</span>
</span><span class='line'><span class="na">     [MaterialToggle]</span> <span class="n">PixelSnap</span> <span class="p">(</span> <span class="s">&quot;Pixel snap&quot;</span><span class="p">,</span> <span class="n">Float</span> <span class="p">)</span> <span class="p">=</span> <span class="m">0</span>
</span><span class='line'>      <span class="n">_OccludedColor</span> <span class="p">(</span> <span class="s">&quot;Occluded Tint&quot;</span><span class="p">,</span> <span class="n">Color</span> <span class="p">)</span> <span class="p">=</span> <span class="p">(</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="m">0.5</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">CGINCLUDE</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// shared structs and vert program used in both the vert and frag programs</span>
</span><span class='line'><span class="k">struct</span> <span class="nc">appdata_t</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">float4</span> <span class="n">vertex</span>   <span class="p">:</span> <span class="n">POSITION</span><span class="p">;</span>
</span><span class='line'>  <span class="n">float4</span> <span class="n">color</span>    <span class="p">:</span> <span class="n">COLOR</span><span class="p">;</span>
</span><span class='line'>  <span class="n">float2</span> <span class="n">texcoord</span> <span class="p">:</span> <span class="n">TEXCOORD0</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="nc">v2f</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">float4</span> <span class="n">vertex</span>   <span class="p">:</span> <span class="n">SV_POSITION</span><span class="p">;</span>
</span><span class='line'>  <span class="n">fixed4</span> <span class="n">color</span>    <span class="p">:</span> <span class="n">COLOR</span><span class="p">;</span>
</span><span class='line'>  <span class="n">half2</span> <span class="n">texcoord</span>  <span class="p">:</span> <span class="n">TEXCOORD0</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">fixed4</span> <span class="n">_Color</span><span class="p">;</span>
</span><span class='line'><span class="n">sampler2D</span> <span class="n">_MainTex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">v2f</span> <span class="nf">vert</span><span class="p">(</span> <span class="n">appdata_t</span> <span class="n">IN</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">v2f</span> <span class="n">OUT</span><span class="p">;</span>
</span><span class='line'>  <span class="n">OUT</span><span class="p">.</span><span class="n">vertex</span> <span class="p">=</span> <span class="n">mul</span><span class="p">(</span> <span class="n">UNITY_MATRIX_MVP</span><span class="p">,</span> <span class="n">IN</span><span class="p">.</span><span class="n">vertex</span> <span class="p">);</span>
</span><span class='line'>  <span class="n">OUT</span><span class="p">.</span><span class="n">texcoord</span> <span class="p">=</span> <span class="n">IN</span><span class="p">.</span><span class="n">texcoord</span><span class="p">;</span>
</span><span class='line'>  <span class="n">OUT</span><span class="p">.</span><span class="n">color</span> <span class="p">=</span> <span class="n">IN</span><span class="p">.</span><span class="n">color</span> <span class="p">*</span> <span class="n">_Color</span><span class="p">;</span>
</span><span class='line'>  <span class="err">#</span><span class="n">ifdef</span> <span class="n">PIXELSNAP_ON</span>
</span><span class='line'>  <span class="n">OUT</span><span class="p">.</span><span class="n">vertex</span> <span class="p">=</span> <span class="n">UnityPixelSnap</span><span class="p">(</span> <span class="n">OUT</span><span class="p">.</span><span class="n">vertex</span> <span class="p">);</span>
</span><span class='line'>  <span class="cp">#endif</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">OUT</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">ENDCG</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="n">SubShader</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">Tags</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="s">&quot;Queue&quot;</span> <span class="p">=</span> <span class="s">&quot;Transparent&quot;</span>
</span><span class='line'>          <span class="s">&quot;IgnoreProjector&quot;</span> <span class="p">=</span> <span class="s">&quot;True&quot;</span>
</span><span class='line'>          <span class="s">&quot;RenderType&quot;</span> <span class="p">=</span> <span class="s">&quot;Transparent&quot;</span>
</span><span class='line'>          <span class="s">&quot;PreviewType&quot;</span> <span class="p">=</span> <span class="s">&quot;Plane&quot;</span>
</span><span class='line'>          <span class="s">&quot;CanUseSpriteAtlas&quot;</span> <span class="p">=</span> <span class="s">&quot;True&quot;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">Cull</span> <span class="n">Off</span>
</span><span class='line'>      <span class="n">Lighting</span> <span class="n">Off</span>
</span><span class='line'>      <span class="n">ZWrite</span> <span class="n">Off</span>
</span><span class='line'>      <span class="n">Blend</span> <span class="n">One</span> <span class="n">OneMinusSrcAlpha</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">Pass</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">Stencil</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">Ref</span> <span class="m">4</span>
</span><span class='line'>              <span class="n">Comp</span> <span class="n">NotEqual</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      <span class="n">CGPROGRAM</span>
</span><span class='line'>          <span class="cp">#pragma vertex vert</span>
</span><span class='line'>          <span class="cp">#pragma fragment frag</span>
</span><span class='line'>          <span class="cp">#pragma multi_compile _ PIXELSNAP_ON</span>
</span><span class='line'>          <span class="err">#</span><span class="n">include</span> <span class="s">&quot;UnityCG.cginc&quot;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>          <span class="n">fixed4</span> <span class="nf">frag</span><span class="p">(</span> <span class="n">v2f</span> <span class="n">IN</span> <span class="p">)</span> <span class="p">:</span> <span class="n">SV_Target</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">fixed4</span> <span class="n">c</span> <span class="p">=</span> <span class="n">tex2D</span><span class="p">(</span> <span class="n">_MainTex</span><span class="p">,</span> <span class="n">IN</span><span class="p">.</span><span class="n">texcoord</span> <span class="p">)</span> <span class="p">*</span> <span class="n">IN</span><span class="p">.</span><span class="n">color</span><span class="p">;</span>
</span><span class='line'>              <span class="n">c</span><span class="p">.</span><span class="n">rgb</span> <span class="p">*=</span> <span class="n">c</span><span class="p">.</span><span class="n">a</span><span class="p">;</span>
</span><span class='line'>              <span class="k">return</span> <span class="n">c</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="n">ENDCG</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// occluded pixel pass. Anything rendered here is behind an occluder</span>
</span><span class='line'>      <span class="n">Pass</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">Stencil</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">Ref</span> <span class="m">4</span>
</span><span class='line'>              <span class="n">Comp</span> <span class="n">Equal</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">CGPROGRAM</span>
</span><span class='line'>          <span class="cp">#pragma vertex vert</span>
</span><span class='line'>          <span class="cp">#pragma fragment frag</span>
</span><span class='line'>          <span class="cp">#pragma multi_compile _ PIXELSNAP_ON</span>
</span><span class='line'>          <span class="err">#</span><span class="n">include</span> <span class="s">&quot;UnityCG.cginc&quot;</span>
</span><span class='line'>
</span><span class='line'>          <span class="n">fixed4</span> <span class="n">_OccludedColor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>          <span class="n">fixed4</span> <span class="nf">frag</span><span class="p">(</span> <span class="n">v2f</span> <span class="n">IN</span> <span class="p">)</span> <span class="p">:</span> <span class="n">SV_Target</span>
</span><span class='line'>          <span class="p">{</span>
</span><span class='line'>              <span class="n">fixed4</span> <span class="n">c</span> <span class="p">=</span> <span class="n">tex2D</span><span class="p">(</span> <span class="n">_MainTex</span><span class="p">,</span> <span class="n">IN</span><span class="p">.</span><span class="n">texcoord</span> <span class="p">);</span>
</span><span class='line'>              <span class="k">return</span> <span class="n">_OccludedColor</span> <span class="p">*</span> <span class="n">c</span><span class="p">.</span><span class="n">a</span><span class="p">;</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="n">ENDCG</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pixel Perfect Camera]]></title>
    <link href="http://blog.prime31.com/pixel-perfect-camera"/>
    <updated>2015-09-18T16:57:31-07:00</updated>
    <id>http://blog.prime31.com/pixel-perfect-camera</id>
    <content type="html"><![CDATA[<p>This post is going to be a little bit different. It will mainly consist of a video with a small amount of accompanying text. Hit me up on Twitter (<a href="https://twitter.com/prime_31">@prime_31</a>) to let me know if you prefer text or video posts. This particular post is very visual seeing as how it is demonstrating a pixel perfect camera.</p>

<!-- more -->


<h2>The Technique</h2>

<p>Getting things setup is pretty simple. The main camera is setup like any other orthographic camera. The output of the main camera is then rendered to a RenderTexture that has a fixed height (your pixel art design-time height). The width of the RenderTexture is just set to the screen&rsquo;s width. We only concern ourself with the height using this technique. The output of the RenderTexture is placed on an offscreen quad. The scale of the quad is set to keep everything pixel perfect. Whenver the screen size changes the RenderTexture width is updated and the quad scale is set to match.</p>

<div class="embed-video-container"><iframe src="//www.youtube.com/embed/yI8JrBNTwkc" allowfullscreen></iframe></div>


<p>A couple extra enhanced features are also present in the video. The main one being 3 different behaviors for when the screen size changes: None, DisableCrop and SetNearestPerfectFitResolution. DisableCrop just ensures the entire contents of the RenderTexture are always visible no matter what. SetNearestPerfectFitResolution will update the height of the camera to be a multiple of the design-time height mentioned previously.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SpriteLightKit and Stencil Buffer Introduction]]></title>
    <link href="http://blog.prime31.com/SpriteLightKit"/>
    <updated>2015-09-04T12:43:25-07:00</updated>
    <id>http://blog.prime31.com/spritelightkit</id>
    <content type="html"><![CDATA[<p>SpriteLightKit brings back the old two buffered blend trick to get pseudo lighting with just sprites. It handles the setup process of getting that second buffer blended with your normal scene. This post will delve into how it works and along the way it will explain the shader techniques used to pull it off.</p>

<!-- more -->


<p>First off, you can find SpriteLightKit in the usual location on <a href="https://github.com/prime31/SpriteLightKit">GitHub</a>. The README has instructions on how to setup SpriteLightKit in your own game and the repo includes a demo scene so that you can see it in action and play around with it. This post won&rsquo;t touch on the setup procedures so be sure to checkout the README for that information. Do note that the ambient light of the scene is setup by just changing the SpriteLightKit camera&rsquo;s background color. A dark grey is usually a good place to start for your ambient light.</p>

<p>Below is what the demo scene included with SpriteLightKit looks like. There are six sprite lights in the scene with 2 of them animated. You can see that the clock tower and the street light are always fully bright. Take note of this for now and we will come back to it later.</p>

<iframe src="http://gfycat.com/DecisiveGregariousAlbacoretuna" frameborder="0" scrolling="no" width="796" height="448" style="-webkit-backface-visibility: hidden;-webkit-transform: scale(1);" ></iframe>


<p>This next gif shows what the scene looks like when taking the ambient light (the camera background color) from yellow to full black.</p>

<iframe src="http://gfycat.com/DaringTallCrane" frameborder="0" scrolling="no" width="640" height="360" style="-webkit-backface-visibility: hidden;-webkit-transform: scale(1);" ></iframe>


<h3>Lights that aren&rsquo;t actually lights</h3>

<p>What SpriteLightKit does is really simple: it renders the output of a camera that can only see your lights and then blends it on top of your normal game view. Simple and very cheap. The performance cost of a sprite light is nowhere near what a regular light costs. You can have tons of sprite lights all over your scene with a negligible performance cost. It works a little bit like deferred lighting in that the total amount of lights in your scene doesn&rsquo;t really matter.</p>

<p>So, if a sprite light isn&rsquo;t a light what is it? It is just a plain old Unity Sprite with the SpriteLightMaterial applied. The SpriteLightMaterial lets you choose the blend mode of the sprite light. Where alpha is zero the light will have no effect and where alpha is 1 the light will be fully bright. Besides that it is identical to the default Unity sprite shader. Generally, a sprite light will have a simple texture with an alpha gradient of some sort that fades out to zero alpha. That will create a soft edged light but don&rsquo;t let that stop you from making hard edged lights or any other crazy ideas you want to try. Hard edged cookies can have a really neat effect.</p>

<p>SpriteLightColorCycler is a script included with SpriteLightKit that lets you animate your lights really easily. Just stick it on any sprite light and play around with the inspector properties. You can create lights that flicker on and off, cycle through different colors or just affect a single color channel (red/green/blue).</p>

<h3>So, how does it work?</h3>

<p>At it&rsquo;s core it is a pretty simple kit but it is an interesting one due to all the different Unity and shader features it employs. All the sprite lights are rendered using a 2nd camera that outputs to a RenderTexture. An image effect on the main camera then blends the RenderTexture with the normal camera&rsquo;s output. If you are new to RenderTextures and image effects, SprightLightKit&rsquo;s code is a great way to get your feet wet due to it being about as simple as you will ever see.</p>

<h2>Introducing, the big scary stencil buffer</h2>

<p>Unity describes the stencil buffer in the following way: <em>The stencil buffer can be used as a general purpose per pixel mask for saving or discarding pixels.</em> That is really all there is to it. The stencil buffer is basically an integer that a shader can write to or read from. It can be incremented or decremented as well. All this doesn&rsquo;t sound too interesting at first glance but it is very useful in action.</p>

<h3>Emissive features that aren&rsquo;t really emissive (more like self illuminated)</h3>

<p>SpriteLightKit uses the stencil buffer to provide a way to specify parts of your scene that you don&rsquo;t want to take part in the mock lighting system. For any piece of your main scene to be able to be self illuminated (like the aforementioned clock tower and street light) you just have to apply the SpriteLightEmissiveSpriteMaterial or SpriteLightEmissiveMeshMaterial to the object that should be self illuminated. Lets take a look at the stencil section of the shader used in both materials.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">Stencil</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Ref</span> <span class="m">2</span>
</span><span class='line'>  <span class="n">Comp</span> <span class="n">Always</span>
</span><span class='line'>  <span class="n">Pass</span> <span class="n">Replace</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We are only going to touch on a few of the stencil operations. For full list of all the available stencil operations be sure to check the <a href="http://docs.unity3d.com/Manual/SL-Stencil.html">Unity docs</a>. Lets talk through the stencil block above in English. Hopefully it will be pretty clear what each line does after it is explained. The value 2 will <em>always</em> <em>replace</em> the current value in the stencil buffer. <em>Ref</em> is the value, <em>Comp</em> is the comparison function and <em>Pass</em> is what should be done if the comparison function passes (it is <em>Always</em> so it always passes).</p>

<p>Below we have the stencil block from the image effect that SpriteLightKit uses. In English, it checks to see if the current value in the stencil buffer is <em>NotEqual</em> to 2. If the test fails (as it will if our self illuminated material wrote 2 to the stencil buffer) then it will do nothing for that pixel. If it succeeds (everywhere there is not a self illuminated pixel) it will continue to render and blend the RenderTexture with the main camera output.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// all emissives write 2 to the stencil buffer. We want to render everything except those pixels</span>
</span><span class='line'><span class="n">Stencil</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Ref</span> <span class="m">2</span>
</span><span class='line'>  <span class="n">Comp</span> <span class="n">NotEqual</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="//f.cl.ly/items/2N43273s1b1w3r2M1W2b/fez.png" alt="" /> The stencil buffer can be used for all kinds of trickery such as portals (as popularized by the game Portal), masks, shadows and anything else you can come up with. They are super efficient and since they occur <em>before</em> pixel shading they can be used to discard pixels that don&rsquo;t need to be processed. As a homework assignment, see if you can use the stencil buffer to replicate the screenshot from Fez. Hint: your sprite will need a 2 pass shader to pull this off. In a future blog post we will go over how to pull off the effect and provide the shaders to do so.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Method for Working With Shared Code With Unity and Git]]></title>
    <link href="http://blog.prime31.com/A-Method-for-Working-with-Shared-Code-with-Unity-and-Git"/>
    <updated>2015-05-19T12:45:51-07:00</updated>
    <id>http://blog.prime31.com/a-method-for-working-with-shared-code-with-unity-and-git</id>
    <content type="html"><![CDATA[<p>Out of the box Unity doesn&rsquo;t provide any good way to have a shared codebase that is used amongst multiple Unity projects. Any code that you drag into a Unity project is automatically copied into it. If you make changes to your shared code you have to remember to change it in every project that uses it. This is obviously not a sustainable approach.</p>

<!-- more -->


<h3>Enter Git Submodules</h3>

<p>Submodules allow you to keep a Git repository as a subdirectory of another Git repository. On it&rsquo;s own this isn&rsquo;t quite enough. Often times, Git repositories have unit tests, demo scenes and full Unity projects in them. Of course you can just make your shared code repositories a naked subdirectory with just code and use submodules directly. Sometimes you don&rsquo;t have control over the repository (open source projects for example) and frankely I prefer to keep Git repos with full Unity projects in tow. This makes isolating the code super easy and lets you just fire up the project and make changes directly.</p>

<p>To illustrate the process that I have been using we&rsquo;ll use the <a href="https://github.com/prime31/StateKit">StateKit</a> repository which is one of the first things I import into any new projects. We&rsquo;ll assume you have the Git repo for your Unity project initialized and ready to go. If you aren&rsquo;t using Git (or some other version control system) it&rsquo;s time for you to start. With the advent of the <a href="https://mac.github.com/">GitHub.app</a> (which works with or without a github.com account) using Git is something anyone can and should be doing even for simple throwaway projects. Simply drag a folder into the GitHub.app and it magically sets up a repo for you. Couldn&rsquo;t be much easier.</p>

<h3>Step-by-Step Guide</h3>

<p>Now that we are all on the same page and we have a Git repo rolling lets get to adding StateKit to our project in a sustainable fashion. You can use the Git application of your choice but for this kind of thing it&rsquo;s actually easier to just use the scary command line. First things first, open a terminal and cd into your Unity project&rsquo;s root folder and make a subdirectory to hold our shared code submodules.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// get ourselves to the root folder of the Unity project</span>
</span><span class='line'><span class="nx">cd</span> <span class="nx">folder</span><span class="o">/</span><span class="nx">otherfolder</span><span class="o">/</span><span class="nx">Unity</span> <span class="nx">Project</span> <span class="nx">Root</span>
</span><span class='line'><span class="c1">// make a folder to organize our shared code submodules</span>
</span><span class='line'><span class="nx">mkdir</span> <span class="nx">submodules</span>
</span><span class='line'><span class="c1">// move into the subfolder</span>
</span><span class='line'><span class="nx">cd</span> <span class="nx">submodules</span>
</span></code></pre></td></tr></table></div></figure>


<p>Your Unity project folder should look something like this:</p>

<p><img src="http://blog.prime31.com/images/posts/submodules/initialFolder.png" alt="" /></p>

<p>Now we are going to add the submodule. We should already be in the <code>submodules</code> directory so the command to add the StateKit repo as a submodule is the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// tell git we want to add a submodule into the StateKit folder</span>
</span><span class='line'><span class="n">git</span> <span class="n">submodule</span> <span class="n">add</span> <span class="n">https</span><span class="o">://</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">prime31</span><span class="o">/</span><span class="nc">StateKit</span> <span class="nc">StateKit</span>
</span></code></pre></td></tr></table></div></figure>


<p>I personally like to have all my shared code in the Plugins folder in Unity but you can add it wherever you want in your project. The main reasons I stick it in the Plugins folder are for organizational purposes and because everything in the Plugins folder gets compiled into it&rsquo;s own DLL by Unity. That means the only time Unity needs to recompile the code in the Plugins folder is when you specifically change something in it. Less work for Unity since we will be doing a large amount of our work in our project&rsquo;s code as opposed to with the shared code.</p>

<p>The final step in the process is to make a symlink from the Plugins folder (or wherever you choose to have the shared code reside) to the folder in the submodule that we want in our project. The StateKit repo folder structure looks like this:</p>

<p><img src="http://blog.prime31.com/images/posts/submodules/stateKitFolder.png" alt="" /></p>

<p>The folder we are interested in is the <code>StateKit/Assets/StateKit</code> folder so that is what we are going to symlink into our project. We want the symlink to originate at the Plugins folder so we will first <code>cd</code> back to that folder then create the symlink.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">// move ourselves back to the folder in our Unity project that we want the shared code to end up</span>
</span><span class='line'><span class="nx">cd</span> <span class="p">..</span><span class="o">/</span><span class="nx">Assets</span><span class="o">/</span><span class="nx">Plugins</span>
</span><span class='line'><span class="c1">// make a symlink from the current folder to the folder in the shared code submodule that we want in our project</span>
</span><span class='line'><span class="nx">ln</span> <span class="o">-</span><span class="nx">s</span> <span class="p">..</span><span class="o">/</span><span class="p">..</span><span class="o">/</span><span class="nx">submodules</span><span class="o">/</span><span class="nx">StateKit</span><span class="o">/</span><span class="nx">Assets</span><span class="o">/</span><span class="nx">StateKit</span> <span class="nx">StateKit</span>
</span></code></pre></td></tr></table></div></figure>


<p>Looking at our Unity project you can see we now have our shared code in place right where we want it:</p>

<p><img src="http://blog.prime31.com/images/posts/submodules/unityProject.png" alt="" /></p>

<p>It should be noted that Unity will get angry at you for creating the symlink. It will display a warning in the console just once to let you know of its anger that looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Assets/Plugins/StateKit is a symbolic link. Using symlinks in Unity projects may cause your project
</span><span class='line'>to become corrupted if you create multiple references to the same asset, use recursive symlinks or
</span><span class='line'>use symlinks to share assets between projects used with different versions of Unity. Make sure you
</span><span class='line'>know what you are doing.</span></code></pre></td></tr></table></div></figure>


<p>Luckily, we know what we are doing here so clear the console and ignore it just like you do when your significant other tells you to clean the bathroom.</p>

<h3>Wrapping Up</h3>

<p>We now have a workable solution to share code between multiple Unity projects. By doing things this way, when we change the shared code it will be propogated to every project that uses it. We even still retain the ability to open up and modify any Unity projects in the submodules. In this particular example we can still open the <code>submodules/StateKit</code> Unity project and go to town making changes. Those changes can then be pushed to the Git remote repo and shared throughout all of your projects easily.</p>

<h3>One More Thing</h3>

<p>If you are an Alfred user you can find a handy workflow that automates everything in this post <a href="https://mega.co.nz/#!JV1QWKbJ!HmLBN7efh_5_bd4TXC7hx2QNgL3DzHO0QEvInBzYUDo">here</a>. Usage is simple and works in two different ways: 1. using the <code>unitysubmoduleadder</code> keyword which will then provide a folder filter for you to choose your Unity project. 2. Place a single folder in the folder buffer (option + up) then use the Unity Git Submodule Adder action (option + right arrow).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Xamarin/MonoDevelop Work for You]]></title>
    <link href="http://blog.prime31.com/making-xamarin-work-for-you"/>
    <updated>2015-05-04T11:42:29-07:00</updated>
    <id>http://blog.prime31.com/making-xamarin-work-for-you</id>
    <content type="html"><![CDATA[<p>One of the biggest pain points with using Unity for game development is the absolutely <em>ancient</em> version of MonoDevelop that ships with it. Anyone who writes code for Unity will spend a vast majority of their time in MonoDevelop as opposed to in Unity itself. This post aims to make that time more enjoyable and less angst filled. As of Unity 5 MonoDevelop 4.0.1 is included with the installer. MonoDevelop 4.0.1 was released on March 5th, <em>2013</em>. Yes, you read that correctly. Over 2 years ago. MonoDevelop is currenctly on version 5.9 which has 2+ years of development time, 2+ years of improvements, 2+ years of bug fixes compared to the Unity fork.</p>

<!-- more -->


<p>Let&rsquo;s just get this out of the way now: if you are on Windows you can stop reading here. I apologize on Microsoft&rsquo;s behalf for the years of terrible Windows releases. I apologize for it being called &ldquo;windows&rdquo; but having the worst window management of any modern OS. I apologize for it force restarting your computer twice every month and all of the work lost becauase of it. You can visit the <a href="http://store.apple.com/us/mac">Apple Store page</a> to remedy the situation.</p>

<h2>Why Not Visual Studio Code?</h2>

<p>The release of Visual Studio Code has got people thinking that anything has to be better than MonoDevelop. In my opinion, Visual Studio Code has a long way to go before it can compete with the latest Xamarin version. It&rsquo;s worth keeping an eye on as it develops over time but in reality it&rsquo;s not a great choice for working with Unity at the moment. There are just too many compromises and missing features.</p>

<h2>Addressing an Old Unity Bug</h2>

<p>Before we go any further there is a Unity bug that we need to discuss. This bug affects the MonoDevelop version that ships with Unity and all newer MonoDevelop/Xamarin versions released after it. Unity injects some cruft into the solution files that it generates that will mess with your code formatting settings in MonoDevelop/Xamarin. Until Unity fixes the bug you can use <a href="https://gist.github.com/prime31/35a83fb8ad4eb385ab22">this script</a> to keep your solution files cleaned up. It will fix the solution files automatically every time Unity regnerates them.</p>

<h2>Get the Goods</h2>

<p>First things first: you need to download the latest version of MonoDevelop (now called Xamarin Studio). You can find it <a href="http://www.monodevelop.com/download/">here</a>. Once you install it you need to tell Unity to start using the newly installed Xamarin Studio. You can do that right in the Unity Preferences in the Editor Tools section. Just set it in the External Script Editor setting like so:</p>

<p><img src="http://blog.prime31.com/images/posts/xamarin/unity-prefs.png" alt="" /></p>

<h2>The (very minor) Caveats</h2>

<p>For now, any time you need to use the debugger you will have to launch the old MonoDevelop included with Unity. In the (hopefully) near future, Unity will be releasing an add-on (basically like a browser extension or plugin) that will work with any Xamarin version. The add-on will provide a full debugger and tight integration with Unity. Until that time you have to &ldquo;jump start&rdquo; Xamarin to get it working properly with Unity. Whenever you launch Unity just click the Assets -> Sync MonoDevelop Project menu item. That will launch Xamarin and get it reading your Unity project properly. You only have to do that once at launch and Xamarin will keep an eye on the solution/project files and reload them as necessary when Unity changes them.</p>

<h2>Bending Xamarin to Your Will</h2>

<p>At this point you can walk away with a working, modern IDE that is light years ahead of what Unity ships with. The rest of this post is going to go into really  making Xamarin work for you. Time saving tips and settings that go a long way to making your time editing code more enjoyable.</p>

<h2>Themes</h2>

<p>Many people enjoy customizing the look of the text editor/IDE they use. I won&rsquo;t go into this in detail but I will say that Xamarin has some nice themes included that you can find in Preferences -> Text Editor -> Syntax Highlighting. Editing themes and making your own is also quite simple in there. Click around and explore and you should be able to figure everything out without much difficulty.</p>

<h2>Understanding Xamarin&rsquo;s Cascading Settings</h2>

<p>Xamarin has several settings duplicated on different levels that cause confusion to folks new to it. At the top level are the global IDE settings which can be found in the normal Preferences panel (Cmd+, or Xamarin Studio -> Preferences menu). These are applied to all new and existing projects. The next settings down are at the solution level. These can be accessed by right-clicking the solution file and choosing &ldquo;Options&rdquo;. The final settings cascade is the project level. You can find them by right-clicking any project file and choosing &ldquo;Options&rdquo;.</p>

<p>When dealing with settings, the lower cascade overrides anything higher. For example, if you have &ldquo;Remove trailing whitespace&rdquo; set to true on the project level and false on the solution level then the true value is what Xamarin will use because it is lower down in the cascade. Remember that Unity bug mentioned above that we fixed with the editor script? Now you have the info to understand it. The bug is that Unity is injecting solution-level settings that affect things like code formatting, tab width, indent margin, etc. Being solution-level, they override all of your global settings!</p>

<p>To avoid confusion I highly recommend <strong>only changing settings on the global level</strong> until you get used to Xamarin&rsquo;s settings system or actually have a need for per-solution/project settings. They can be useful in cases where you may be working with different teams on different projects and each team has it&rsquo;s own set of naming conventions or code formatting. Most people will only need to change the global level settings though and messing with solution/project level settings is risky anyway due to Unity constantly destroying and recreating the solution and project files.</p>

<h2>Key Bindings</h2>

<p>You can find the key bindings settings here: Preferences -> Environment -> Key Bindings. These are pretty self explanatory so I&rsquo;ll just leave it at that. Run through and set these up in a way that makes sense for your brain and fingers. Once you do, all your Xamarin projects will then use the same key bindings.</p>

<h2>Code Formatting</h2>

<p>This is one of those things that I highly recommeond setting up. You run through the setup just once and all of your future projects will be formatted exactly the way you like with no extra work on your part. You can find the code formatting options in Preferences -> Source Code -> Code Formatting -> C# source code. If you click on the &ldquo;C# Format&rdquo; tab it will show you a little preview of what the formatted code will look like. Chances are it won&rsquo;t be exactly how you like it. Click the Edit button and run through all the different sections setting things up exactly the way you like. When you are done, you will see that the &ldquo;Policy&rdquo; is now set to &ldquo;Custom&rdquo;.</p>

<p><img src="http://blog.prime31.com/images/posts/xamarin/source-code-pref.png" alt="" /></p>

<p>Policies are really handy in Xamarin. They are basically a way of saving all your settings in a file so that you can share them or transfer them to other computers keeping your teammates all using the same rules. Let&rsquo;s go ahead and save a new policy just in case we ever need it. Open the Project -> Export Policy&hellip; menu item and in the top box pick a descriptive name for your policy and click the &ldquo;Export policies&rdquo; button.</p>

<h2>Putting our Policy into Action</h2>

<p>Let&rsquo;s take a quick look at just a couple of the things we can do with Xamarin and our policy. First up, lets let Xamarin implement an interface for us and then we will use the formatting option to format the code exactly how we specified in the previous setion. Note that we could have also had auto formatting turned on and the code formatting would have happened for us. Xamarin can also automatically add <em>using</em> statements, implement abstract methods and lots of other goodies. Just right-click on your code and check the menu on occassion to see what it has.</p>

<iframe src="http://gfycat.com/UnconsciousMaleKakapo" frameborder="0" scrolling="no" width="1092" height="630" style="-webkit-backface-visibility: hidden;-webkit-transform: scale(1);" ></iframe>


<p>This next one we will do a safe method rename. When you rename a method like this it changes every single reference to the method in your codebase so it won&rsquo;t need to be changed anywhere else. After we rename the method &ldquo;///&rdquo; (three slashes) are typed above the method which automatically creates an XML comment with all the method parameters that we can fill in. Xamarin will show that information automatically whenever you call the method from another script.</p>

<iframe src="http://gfycat.com/AcclaimedReadyAtlanticsharpnosepuffer" frameborder="0" scrolling="no" width="610" height="396" style="-webkit-backface-visibility: hidden;-webkit-transform: scale(1.0);" ></iframe>


<h2>Two Really, Really Handy Shortcuts</h2>

<p>Xamarin brings a great productivity boost with it&rsquo;s many features. I couldn&rsquo;t end this post without leaving my two most used shortcuts. First up is a full symbol search. (<code>Cmd + .</code>). Just start typing and Xamarin will display all the matching symbols and files with a handy preview when you press the up/down arrows to highlight a result.</p>

<iframe src="http://gfycat.com/FickleTerribleHoneycreeper" frameborder="0" scrolling="no" width="862" height="530" style="-webkit-backface-visibility: hidden;-webkit-transform: scale(1.0);" ></iframe>


<p>Next up is file search. Pressing <code>Cmd + shift + D</code> will again jump focus up to the search box but it prefils the prefix &ldquo;file:&rdquo; for you. This limits the search to just file names. Full fuzzy matching is included so for a file called <strong>C</strong>amera<strong>M</strong>anager for example, you can find it by just typing &ldquo;CM&rdquo;.</p>

<iframe src="http://gfycat.com/ValuableBigEeve" frameborder="0" scrolling="no" width="862" height="530" style="-webkit-backface-visibility: hidden;-webkit-transform: scale(1.0);" ></iframe>


<h2>Conclusion</h2>

<p>Taking a few minutes to setup your coding environment will save you tons of time (and frustration) later. Better still, once you take the time to get Xamarin setup the way you like it you never have to go through the setup again. Ditch the terrible version of MonoDevelop that ships with Unity and enjoy an IDE that actually works. As an added benefit, as soon as Unity finishes work on the Xamarin add-on we will have full debugging at some point in the future.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making a Sprite Blink]]></title>
    <link href="http://blog.prime31.com/sprite-blink-shader"/>
    <updated>2015-04-19T14:48:41-07:00</updated>
    <id>http://blog.prime31.com/sprite-blink-shader</id>
    <content type="html"><![CDATA[<p>This is the first post in response to a reader-suggested topic and probably not the last. If there is a specific topic that you would like to see covered feel free to send over a question/request. Quite often when dealing with sprites you may want to have the sprite blink in a solid color to indicate various different states such as taking damage, build up before attack, etc. Unity&rsquo;s default sprite shader has only a tint color property so out of the box it isn&rsquo;t possible to do.</p>

<!-- more -->


<p>We aren&rsquo;t going to go into great detail on the basics of writing a shader in this post but only a rudimentary understanding is required. For an in-depth beginners guide to shaders you can checkout our tutorial series on <a href="https://www.youtube.com/playlist?list=PLb8LPjN5zpx1tauZfNE1cMIIPy15UlJNZ">YouTube.</a> First things first: visit <a href="http://unity3d.com/get-unity/download/archive">Unity&rsquo;s website</a> and fetch the built in shader source. We are going to just add a few lines to the Sprites-Default shader to add the blink effect.</p>

<h3>The Shader</h3>

<p>The first thing we are going to need to do is add a property to the shader so that we can specify the blink color. Just add the following line in the Properties section to do so:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">_BlinkColor</span> <span class="p">(</span><span class="s">&quot;Blink Color&quot;</span><span class="p">,</span> <span class="n">Color</span><span class="p">)</span> <span class="p">=</span> <span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">,</span><span class="m">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next up, we need to add the declaration in the shader for the new _BlinkColor property that we just added. This can be done by adding the following line directly under (or above) the <code>fixed4 _Color;</code> declaration already present in the shader:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">fixed4</span> <span class="n">_BlinkColor</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are a few different ways we can handle the blinking. A nice, flexible approach for this particular case would be to provide the ability to immediately flash to the blink color but also provide a way to smoothly interpolate from the current color to the blink color. Doing it this way should provide the most flexibility. Locate the line in the shader that looks like this:
<code>fixed4 c = tex2D(_MainTex, IN.texcoord) * IN.color;</code>
Directly underneath that add the line below which will handle the blinking.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">c</span><span class="p">.</span><span class="n">rgb</span> <span class="p">=</span> <span class="n">lerp</span><span class="p">(</span> <span class="n">c</span><span class="p">.</span><span class="n">rgb</span><span class="p">,</span> <span class="n">_BlinkColor</span><span class="p">.</span><span class="n">rgb</span><span class="p">,</span> <span class="n">_BlinkColor</span><span class="p">.</span><span class="n">a</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>What we are doing in that line is using the alpha value of the blink color to interpolate the final color from the original sprite color to our blink color. If the blink color has an alpha of 0 then the standard sprite color will be displayed. When the blink color has an alpha of 1 only the blink color will be shown. Any value in between 0 and 1 will interpolate between the two colors.</p>

<h3>Code to Control the Shader</h3>

<p>Now that we have the shader code all wrapped up we need to make a quick script to manage the blink color. The code block below will do a hard blink (jump from the sprite color directly to the blink color). To see it in action check out <a href="http://cl.ly/ai7N">this short video.</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IEnumerator</span> <span class="nf">blink</span><span class="p">(</span> <span class="kt">float</span> <span class="n">delayBetweenBlinks</span><span class="p">,</span> <span class="kt">int</span> <span class="n">numberOfBlinks</span><span class="p">,</span> <span class="n">Color</span> <span class="n">blinkColor</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">material</span> <span class="p">=</span> <span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">SpriteRenderer</span><span class="p">&gt;().</span><span class="n">material</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">counter</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span> <span class="n">counter</span> <span class="p">&lt;=</span> <span class="n">numberOfBlinks</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">material</span><span class="p">.</span><span class="n">SetColor</span><span class="p">(</span> <span class="s">&quot;_BlinkColor&quot;</span><span class="p">,</span> <span class="n">blinkColor</span> <span class="p">);</span>
</span><span class='line'>      <span class="n">counter</span><span class="p">++;</span>
</span><span class='line'>      <span class="n">blinkColor</span><span class="p">.</span><span class="n">a</span> <span class="p">=</span> <span class="n">blinkColor</span><span class="p">.</span><span class="n">a</span> <span class="p">==</span> <span class="m">1f</span> <span class="p">?</span> <span class="m">0f</span> <span class="p">:</span> <span class="m">1f</span><span class="p">;</span>
</span><span class='line'>      <span class="k">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="nf">WaitForSeconds</span><span class="p">(</span> <span class="n">delayBetweenBlinks</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// revert to our standard sprite color</span>
</span><span class='line'>  <span class="n">blinkColor</span><span class="p">.</span><span class="n">a</span> <span class="p">=</span> <span class="m">0f</span><span class="p">;</span>
</span><span class='line'>  <span class="n">material</span><span class="p">.</span><span class="n">SetColor</span><span class="p">(</span> <span class="s">&quot;_BlinkColor&quot;</span><span class="p">,</span> <span class="n">blinkColor</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This final code block shows how to use the interpolation we built into the shader. It just does a simple ping-pong of the alpha value so that you can see how the shader works. <a href="http://cl.ly/ai82">Here it is</a> in action. You can get a lot fancier with the final outcome of the blink by varying the alpha value in a non-linear way (using AnimationCurves, a <a href="http://blog.prime31.com/anatomy-of-a-tween-lib/">tween library</a>, easing equations, etc).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IEnumerator</span> <span class="nf">blinkSmooth</span><span class="p">(</span> <span class="kt">float</span> <span class="n">timeScale</span><span class="p">,</span> <span class="kt">float</span> <span class="n">duration</span><span class="p">,</span> <span class="n">Color</span> <span class="n">blinkColor</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">material</span> <span class="p">=</span> <span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">SpriteRenderer</span><span class="p">&gt;().</span><span class="n">material</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">elapsedTime</span> <span class="p">=</span> <span class="m">0f</span><span class="p">;</span>
</span><span class='line'>  <span class="k">while</span><span class="p">(</span> <span class="n">elapsedTime</span> <span class="p">&lt;=</span> <span class="n">duration</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">material</span><span class="p">.</span><span class="n">SetColor</span><span class="p">(</span> <span class="s">&quot;_BlinkColor&quot;</span><span class="p">,</span> <span class="n">blinkColor</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">blinkColor</span><span class="p">.</span><span class="n">a</span> <span class="p">=</span> <span class="n">Mathf</span><span class="p">.</span><span class="n">PingPong</span><span class="p">(</span> <span class="n">elapsedTime</span> <span class="p">*</span> <span class="n">timeScale</span><span class="p">,</span> <span class="m">1f</span> <span class="p">);</span>
</span><span class='line'>      <span class="n">elapsedTime</span> <span class="p">+=</span> <span class="n">Time</span><span class="p">.</span><span class="n">deltaTime</span><span class="p">;</span>
</span><span class='line'>      <span class="k">yield</span> <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// revert to our standard sprite color</span>
</span><span class='line'>  <span class="n">blinkColor</span><span class="p">.</span><span class="n">a</span> <span class="p">=</span> <span class="m">0f</span><span class="p">;</span>
</span><span class='line'>  <span class="n">material</span><span class="p">.</span><span class="n">SetColor</span><span class="p">(</span> <span class="s">&quot;_BlinkColor&quot;</span><span class="p">,</span> <span class="n">blinkColor</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Anatomy of a Tween Library]]></title>
    <link href="http://blog.prime31.com/anatomy-of-a-tween-lib"/>
    <updated>2015-04-17T18:29:33-07:00</updated>
    <id>http://blog.prime31.com/anatomy-of-a-tween-lib</id>
    <content type="html"><![CDATA[<p>Every game engine seems to have dozens of tween libs available. In this post we will dive head first into what a tween lib really is and eventually end up with the design decisions that went into GoKit, GoKitLite and the soon to be released ZestKit (yes, that will be the <em>third</em> open source tween lib that I release for Unity. Shoot me).</p>

<!-- more -->


<p>At it&rsquo;s very core, a tween lib is utterly simple. What it boils down to is just the following (position is used for this example but the same exact thing applies to floats, quaternions, vectors, ints, etc): <code>trans.position = from + ( to - from ) * elapsedTime</code>   <br/>
or even simpler:   <br/>
<code>trans.position = lerp( from, to, elapsedTime )</code> <br/>
where elapsedTime ticks from 0 to 1. Now that is just a linear interpololation which is the ugliest, most unnatural way to move an object but adding more interesting easing to this is pretty trivial.</p>

<p>If a tween lib is so simple why are there so many of them? Mainly convenience. The tween lib can cover lots of boilerplate code like managing the tween state, allow pause/resume, syntactic sugar, caching, etc. Before we get into any gory details lets have a look at the two previous tween libs that I have made (you can find them on GitHub).</p>

<h3>GoKit Breakdown</h3>

<p><a href="https://github.com/prime31/GoKit">GoKit</a> uses an object oriented approach to tweening. It is extremely flexible, extensible and quite comprehensive. It was designed around the idea of configuring a tween (what to tween, duration, delay, etc) and reusing the configuration object. It was also intended that folks would subclass the various tween types to make their own. In reality 99.8% of people just used GoKit directly without making any of their own tweens.</p>

<h3>GoKitLite Breakdown</h3>

<p><a href="https://github.com/prime31/GoKitLite">GoKitLite</a> is the antithesis of GoKit. It is not extensible at all. GoKitLite was made for raw speed. It doesn&rsquo;t allocate anything at runtime and it can tween all the most common items (mainly Transform and Material properties). GoKitLite was designed to be stuck in a DLL and used as is. Because of that when it is used in source form (as it is almost always) there are gobs of internal state that are exposed to callers. That is mainly due to the liberal use if the <code>internal</code> keyword which does nothing at all if the code isn&rsquo;t packaged up in a DLL.</p>

<h3>Now We Are Wiser. Introducing ZestKit</h3>

<p>I decided to have one more go armed with the knowledge of the past. The goals were simple: it has to be as fast as GoKitLite and as extensible as (and easier to extend than) GoKit. The public API should be simple and foolproof and it needs to be able to tween anything.</p>

<p>The image below has a breakdown of the major parts involved in ZestKit. The breakdown of responsibilies allows for a nice separation of duties.</p>

<p><img src="http://blog.prime31.com/images/posts/tweenLib/ZestKit.png" alt="" /></p>

<p>The <strong>ZestKit</strong> class is the only MonoBehaviour subclass. It manages a list of Tweens and that is all it does. The <strong>Tween</strong> class manages it&rsquo;s own state: paused, playing, elapsed time, looping, etc. The <strong>TweenTarget</strong> class doesn&rsquo;t do anything at all besides setting the actual property on the object. The static <strong>Zest</strong> class is the mathematician. It knows about easing and lerping and all that jazz. Being a static class it can be used independently of the rest of ZestKit.</p>

<h2>Interfaces Everywhere!</h2>

<p>Why use interfaces at all? Interfaces are a great way to separate responsibility. I know that a tween needs to be able to be ticked before I even write a single line of code. The ZestKit class doesn&rsquo;t need to know anything more about a Tween besides this fact. Stick <em>tick</em> in an interface and we can wire up the entire ZestKit class. It will only ever know that it is dealing with objects that have a tick method. This gives us some great flexibility. Since all we need is a tick method we can add objects that implement that tick method but are not necessarily tweens themselves. Maybe we want to be able to chain a bunch of tweens together and run them one after the other. Implementing a class that does that and can be managed by ZestKit is possible because of interfaces.</p>

<p>Interfaces are also great for adding extensibility to a library. In the case of the Tween class (see the image above) you can see that it houses a TweenTarget. That target is really an <code>ITweenTarget&lt;T&gt;</code> (where T is the value type being tweened: float, Vector2, int, etc). Remember above that one of the goals was to make ZestKit easier to extend than GoKit? The ITweenTarget is the key to all that. With ZestKit all you need to do to be able to tween anything at all is implement the single method in the ITweenTarget interface. Let&rsquo;s say you have a Quaternion property (myQuatProp) that you want to tween in your class (SuperClass). All you have to do to make it ZestKit ready is add the following method to your class:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">SuperClass</span> <span class="p">:</span> <span class="n">ITweenTarget</span><span class="p">&lt;</span><span class="n">Quaternion</span><span class="p">&gt;</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">void</span> <span class="nf">setTweenedValue</span><span class="p">(</span> <span class="n">Quaternion</span> <span class="k">value</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">myQuatProp</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Interfaces can also be used as a means to make a succinct public API. All of the tween creation methods in ZestKit do just that. They only ever return an <code>ITween&lt;T&gt;</code>. This lets anyone calling the ZestKit methods have an object with a nice, concise interface applied. No extra cruft shows up when autocompleting a method in your IDE. You see only the relevant Tween-specific methods.</p>

<p>If you made it this far, congratulations! ZestKit is being developed alongside a game (someone has to dogfood this stuff!) and should be commented up and ready for release real soon. Watch out for it on GitHub.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PropEnumEvents (Wtf?)]]></title>
    <link href="http://blog.prime31.com/prop-enum-events"/>
    <updated>2015-03-27T21:05:54-07:00</updated>
    <id>http://blog.prime31.com/enum-property-events</id>
    <content type="html"><![CDATA[<p>I often use <a href="https://github.com/prime31/StateKit">StateKit</a> (a simple, object-based finite state machine implementation) for all kinds of state management. It gets used for enemy AI, player controllers, menus and just about everywhere else. In a recent project that was not very well defined (to be honest, it was made almsot completely on the fly) I needed a super flexible way to deal with a hierarchial state machine. The solution presented in this post is what I ended up using and it has been dubbed the PropEnumEvent system.</p>

<!-- more -->


<h2>Defining the Problem</h2>

<p>Let&rsquo;s say you have a game with a main menu and some submenus. Maybe you have no idea how many menus and you need a nice, flexible way to deal with them. We&rsquo;ll start things off by creating an enum that has a value for each menu/state in the game.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">enum</span> <span class="n">GameState</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">MainMenu</span><span class="p">,</span>
</span><span class='line'>  <span class="n">LevelSelectMenu</span><span class="p">,</span>
</span><span class='line'>  <span class="n">MultiPlayerMenu</span><span class="p">,</span>
</span><span class='line'>  <span class="n">Map</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To add a bit of spice to the discussion, lets add some substates for the GameState.Map value:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">enum</span> <span class="n">MapState</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Editing</span><span class="p">,</span>
</span><span class='line'>  <span class="n">PrePlay</span><span class="p">,</span>
</span><span class='line'>  <span class="n">Playing</span><span class="p">,</span>
</span><span class='line'>  <span class="n">Paused</span><span class="p">,</span>
</span><span class='line'>  <span class="n">PlayerWon</span><span class="p">,</span>
</span><span class='line'>  <span class="n">PlayerDied</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If we were to whip up a quick diagram for what we have so far it might look something like this:</p>

<p><img src="http://blog.prime31.com/images/posts/propEnumEvents/state-flow.png" alt="" /></p>

<p>We can only be on one screen at any given time and the Map screen has several different sub states. Nothing groundbreaking here so far. We want to use these enums to drive the entire state of the game from launch until completion. We are going to need to show/hide UI, HUD elements, control enemy AI state etc. There is no limit to how far you can take it.</p>

<h2>Decouple the Pieces!</h2>

<p>I personally hate tightly coupled code. It makes changing things, adding features and refactoring a huge PITA. <a href="https://github.com/prime31/MessageKit">MessageKit</a> solves a lot of the tight coupling problems and it will be used for the PropEnumEvent system since I always already have it in whatever project I am working on. The meat of the solution is incredibly simple but quite powerful (and quite similar to <a href="https://msdn.microsoft.com/en-us/library/system.componentmodel.inotifypropertychanged%28v=vs.110%29.aspx?f=255&amp;MSPPError=-2147217396">INotifyPropertyChanged</a> or <a href="https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html">KVO</a>). All we are going to do is wire up a property that when changed uses MessageKit to post a message with the new enum value (note that plain old .NET events would work fine as well for this if you don&rsquo;t use MessageKit). You&rsquo;ll see in the code below the message is posted <em>before</em> the value is set. The reason for that is that sometimes the system listening for the message needs to know the previous state (UI for example so that it can do proper transitions). When the message is received the receiver will get the new state and they can access the old state via the <em>state</em> property.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">static</span> <span class="n">GameState</span> <span class="n">_state</span><span class="p">;</span>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">GameState</span> <span class="n">state</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">get</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">_state</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">set</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="n">_state</span> <span class="p">==</span> <span class="k">value</span> <span class="p">)</span>
</span><span class='line'>          <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">MessageKit</span><span class="p">&lt;</span><span class="n">GameState</span><span class="p">&gt;.</span><span class="n">post</span><span class="p">(</span> <span class="n">Messages</span><span class="p">.</span><span class="n">gameStateChanged</span><span class="p">,</span> <span class="k">value</span> <span class="p">);</span>
</span><span class='line'>      <span class="n">_state</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="n">MapState</span> <span class="n">_state</span><span class="p">;</span>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">MapState</span> <span class="n">state</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">get</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">_state</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">set</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="n">_state</span> <span class="p">==</span> <span class="k">value</span> <span class="p">)</span>
</span><span class='line'>          <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">MessageKit</span><span class="p">&lt;</span><span class="n">GameState</span><span class="p">&gt;.</span><span class="n">post</span><span class="p">(</span> <span class="n">Messages</span><span class="p">.</span><span class="n">mapStateChanged</span><span class="p">,</span> <span class="k">value</span> <span class="p">);</span>
</span><span class='line'>      <span class="n">_state</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s it. Nothing more to it. In that little snippet of code we end up with a powerful, decoupled system to control our games. Adding new enum values as the game grows in complexity is no problem. Code can set the enum and trigger the message at any time easily. Some example message listeners from the project this was used in are HUD (activates/deactivates features based on state), canvas (hides/shows menus with animations based on state), player (enables/disables self, jumps to spawn point, increments death count).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making PlayerPrefs Sane]]></title>
    <link href="http://blog.prime31.com/making-playerprefs-sane"/>
    <updated>2015-02-11T10:24:30-08:00</updated>
    <id>http://blog.prime31.com/making-player-prefs-sane</id>
    <content type="html"><![CDATA[<p>In past posts (mainly <a href="http://blog.prime31.com/constants-generator-kit">this one</a>), we talked about reducing or removing all &ldquo;naked strings&rdquo;. We do this to reduce coding errors and maintain sanity as projects grow in size. The post provided a solution for tags, layers, scenes and resources. It did not, however, help clean up the much used-and-abused PlayerPrefs.</p>

<!-- more -->


<p>First off, let&rsquo;s just get this out of the way: if you are storing any large amounts of data in PlayerPrefs stop doing that immediately. PlayerPrefs is a simple key/value store. If you need to store more data then use the proper medium: files. The previous post on <a href="http://blog.prime31.com/persisting-data-with-json">Persisting Strongly Typed Data With JSON</a> would be a good solution. I have seen some horrendous code where people were storing all their persistant data in PlayerPrefs and then they were surprised when certain operating systems were truncating and/or removing that data because it exceed the key/value size. The moral of the story is don&rsquo;t be that guy. It&rsquo;s a very hard bug to track down. Save yourself the pain.</p>

<h2>Make Them Sane!</h2>

<p>Now that we got all that out of the way let&rsquo;s get down to business. Our goal here is to make safe, simple access to PlayerPrefs and to hide all the ugly strings used for the keys. By doing this, we also get to add some oddly missing features to PlayerPrefs such as support for bools. Lets start by adding a new class and putting in a property to access an int, in this case it will be the last level that was played. We want to remove all the naked strings so we make a <code>const string</code> to hold the key name and a property to access the data. Nice, simple and most importantly fool-proof.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">SanePrefs</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">LAST_PLAYED_LEVEL</span> <span class="p">=</span> <span class="s">&quot;lastPlayedLevel&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">lastPlayedLevel</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">PlayerPrefs</span><span class="p">.</span><span class="n">GetInt</span><span class="p">(</span> <span class="n">LAST_PLAYED_LEVEL</span><span class="p">,</span> <span class="p">-</span><span class="m">1</span> <span class="p">);</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">set</span> <span class="p">{</span> <span class="n">PlayerPrefs</span><span class="p">.</span><span class="n">SetInt</span><span class="p">(</span> <span class="n">LAST_PLAYED_LEVEL</span><span class="p">,</span> <span class="k">value</span> <span class="p">);</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">save</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">PlayerPrefs</span><span class="p">.</span><span class="n">Save</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Accessing our int is now a simple call to <code>SanePrefs.lastPlayedLevel</code>. Setting the last played level is equally is simple: <code>SanePrefs.lastPlayedLevel = 3</code>. Whenever we need a new pref we just add it to this class. The below example adds a string and a bool. Now PlayerPrefs doesn&rsquo;t have bools so we use the isFirstPlay property to handle a transition from int to bool behind the scenes. The playerName example also illustrates one additional feature we can add: it auto saves the PlayerPrefs when it is set. This is something you will only want to do for prefs that aren&rsquo;t set often. You can&rsquo;t be guaranteed that the save call is going to be performant and there is no reason to be writing to disk after every set. playerName is only ever set once so it is a good candidate to auto save.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">SanePrefs</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">IS_FIRST_PLAY</span> <span class="p">=</span> <span class="s">&quot;isFirstPlay&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">LAST_PLAYED_LEVEL</span> <span class="p">=</span> <span class="s">&quot;lastPlayedLevel&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">private</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">PLAYER_NAME</span> <span class="p">=</span> <span class="s">&quot;playerName&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="n">isFirstPlay</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">PlayerPrefs</span><span class="p">.</span><span class="n">GetInt</span><span class="p">(</span> <span class="n">IS_FIRST_PLAY</span> <span class="p">)</span> <span class="p">==</span> <span class="m">1</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">set</span> <span class="p">{</span> <span class="n">PlayerPrefs</span><span class="p">.</span><span class="n">SetInt</span><span class="p">(</span> <span class="n">IS_FIRST_PLAY</span><span class="p">,</span> <span class="k">value</span> <span class="p">?</span> <span class="m">1</span> <span class="p">:</span> <span class="m">0</span> <span class="p">);</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">lastPlayedLevel</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">PlayerPrefs</span><span class="p">.</span><span class="n">GetInt</span><span class="p">(</span> <span class="n">LAST_PLAYED_LEVEL</span><span class="p">,</span> <span class="p">-</span><span class="m">1</span> <span class="p">);</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">set</span> <span class="p">{</span> <span class="n">PlayerPrefs</span><span class="p">.</span><span class="n">SetInt</span><span class="p">(</span> <span class="n">LAST_PLAYED_LEVEL</span><span class="p">,</span> <span class="k">value</span> <span class="p">);</span> <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="n">playerName</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">PlayerPrefs</span><span class="p">.</span><span class="n">GetString</span><span class="p">(</span> <span class="n">PLAYER_NAME</span><span class="p">,</span> <span class="kt">string</span><span class="p">.</span><span class="n">Empty</span> <span class="p">);</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">set</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">PlayerPrefs</span><span class="p">.</span><span class="n">SetString</span><span class="p">(</span> <span class="n">PLAYER_NAME</span><span class="p">,</span> <span class="k">value</span> <span class="p">);</span>
</span><span class='line'>          <span class="n">PlayerPrefs</span><span class="p">.</span><span class="n">Save</span><span class="p">();</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">save</span><span class="p">()</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">PlayerPrefs</span><span class="p">.</span><span class="n">Save</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s all there is to it. Nothing magical here, just wrapping up a naked string based API and making it easier to use. One last little note to make here is that by wrapping our prefs up in a class like this if at some point in the future we no longer want to be using PlayerPrefs we only ever have to change the code in this class to make the backing store anything we want. For example, on iOS perhaps we want to persist this data to iCloud so that is available across multiple devices. All we need to do is swap out the PlayerPrefs calls for iCloud equivalents.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Persisting Strongly Typed Data With JSON]]></title>
    <link href="http://blog.prime31.com/persisting-data-with-json"/>
    <updated>2015-02-02T10:24:30-08:00</updated>
    <id>http://blog.prime31.com/persisting-data-with-json</id>
    <content type="html"><![CDATA[<p>JSON is often thought of as a data transport format for hipsters who use Node.js or Ruby or whatever the new language/platform for cool kids is this week. JSON also happens to be a fantastic way for us nerds to store data in a human-readable format that is well suited for game dev.</p>

<!-- more -->


<p>Let us start by saying you do not need to wear tight-fitting jeans or buy your entire wardrobe from Urban Outfitters to be able to use JSON. It is assumed that you have some idea what JSON is. If you do not, now is a good time to reference the <a href="http://www.json.org/">JSON page</a> or <a href="http://en.wikipedia.org/wiki/JSON">Wikipedia</a>. We will be using the JSON library that comes with every prime31 plugin (in the P31RestKit.dll) for the examples in this post. Feel free to substitue your own favorite JSON library if it supports serializing classes.</p>

<h2>The Problem</h2>

<p>Every game has to persist data at some point whether it be player stats, high scores, continue points or just player&rsquo;s chosen name. Unity provides the PlayerPrefs class for simple data. Many people abuse PlayerPrefs and try to store all of their game data in it which is a poor idea. PlayerPrefs are backed by platform specific, simple key-value stores on some platforms. They were designed to store only a small amount of data that often remains in memory at all times. Some platforms have an upper limit on how large any key/value pair can be as well. Be smart and use PlayerPrefs for what it was intended for: simple key/value pairs.</p>

<h2>The Solution</h2>

<p>There are many, many ways to persist data. Some of the most popular include XML, SQL/SQLite, Protocol Buffers, web-based data stores, BinaryFormatter, etc. You have to choose the right tool for the job. As you can imagine, in this post we will be using JSON as our data format which is well suited for small to moderate amounts of data. If you have a massive amount of data you should consider using a database. If you need the data available on multiple devices a web-based data store is a good idea (which you can store JSON in as well).</p>

<p>In the example that follows, we are going to take a mock GameData class (which would represent all the data that you may want to store for your game) and persist it to disk. In an effort to not make this example to simple or too complex the GameData class will contain a single List of LevelStats as well. The LevelStats class represents the score and grade that a player got on that particular level. It uses an Enum for the grade. This hierarchy of classes is complex enough to be real world but easy enough to follow along with. Without further ado here are the two classes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">GameData</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">string</span> <span class="n">playerName</span><span class="p">;</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">float</span> <span class="n">totalScore</span><span class="p">;</span>
</span><span class='line'>  <span class="k">public</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">LevelStats</span><span class="p">&gt;</span> <span class="n">levelStats</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">LevelStats</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">enum</span> <span class="n">LevelStatsGrade</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">A</span><span class="p">,</span>
</span><span class='line'>      <span class="n">B</span><span class="p">,</span>
</span><span class='line'>      <span class="n">C</span><span class="p">,</span>
</span><span class='line'>      <span class="n">D</span><span class="p">,</span>
</span><span class='line'>      <span class="n">F</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="kt">int</span> <span class="n">levelNumber</span><span class="p">;</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">float</span> <span class="n">levelScore</span><span class="p">;</span>
</span><span class='line'>  <span class="k">public</span> <span class="n">LevelStats</span><span class="p">.</span><span class="n">LevelStatsGrade</span> <span class="n">levelGrade</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this scenario, GameData is the main point of entry for the persistant data. We want to keep things organinized, logical and simple to use so we will add two new methods to the GameData class to handle saving and loading data from disk. Each method will take in a filename so that we can store multiple GameData classes to disk. This is useful for games with more than one &ldquo;save slot&rdquo;. If your game is single player with no notion of save slots feel free to hardcode the filename. The code is pretty basic but there is one bit that I want to draw your attention to. When calling <code>Json.decode&lt;&gt;</code> you have to tell the JSON library which class you want to deserialize the data back into. In this case it is the GameData class.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">saveToFile</span><span class="p">(</span> <span class="kt">string</span> <span class="n">filename</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">json</span> <span class="p">=</span> <span class="n">Json</span><span class="p">.</span><span class="n">encode</span><span class="p">(</span> <span class="k">this</span> <span class="p">);</span>
</span><span class='line'>  <span class="n">File</span><span class="p">.</span><span class="n">WriteAllText</span><span class="p">(</span> <span class="n">Path</span><span class="p">.</span><span class="n">Combine</span><span class="p">(</span> <span class="n">Application</span><span class="p">.</span><span class="n">persistentDataPath</span><span class="p">,</span> <span class="n">filename</span> <span class="p">),</span> <span class="n">json</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">GameData</span> <span class="nf">createGameDataFromFile</span><span class="p">(</span> <span class="kt">string</span> <span class="n">filename</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">json</span> <span class="p">=</span> <span class="n">File</span><span class="p">.</span><span class="n">ReadAllText</span><span class="p">(</span> <span class="n">Path</span><span class="p">.</span><span class="n">Combine</span><span class="p">(</span> <span class="n">Application</span><span class="p">.</span><span class="n">persistentDataPath</span><span class="p">,</span> <span class="n">filename</span> <span class="p">)</span> <span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">Json</span><span class="p">.</span><span class="n">decode</span><span class="p">&lt;</span><span class="n">GameData</span><span class="p">&gt;(</span> <span class="n">json</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s all there is to it. Now all you have to do is call <code>gameData.saveToFile( "game-data.json" )</code> where appropriate to persist the data (perhaps after each level and in OnApplicationPause/Quit). When you want to fetch the data at startup you just call <code>gameData = GameData.createGameDataFromFile( "game-data.json" )</code>. An example of what the data in the game-data.json file looks like after saving is below. You can see that it is easily readable and you can hand-edit it as well if needed. Tip: to pretty-print the JSON (like the example below) or any other object you can use the <code>Prime31.Utils.logObject</code> method.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;playerName&quot;</span><span class="o">:</span> <span class="s2">&quot;Hello Kitty&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;totalScore&quot;</span><span class="o">:</span> <span class="mf">12.4</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;levelStats&quot;</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;levelNumber&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;levelScore&quot;</span><span class="o">:</span> <span class="mi">100</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;levelGrade&quot;</span><span class="o">:</span> <span class="mi">0</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;levelNumber&quot;</span><span class="o">:</span> <span class="mi">2</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;levelScore&quot;</span><span class="o">:</span> <span class="mi">75</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;levelGrade&quot;</span><span class="o">:</span> <span class="mi">2</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;levelNumber&quot;</span><span class="o">:</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;levelScore&quot;</span><span class="o">:</span> <span class="mi">13</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;levelGrade&quot;</span><span class="o">:</span> <span class="mi">4</span>
</span><span class='line'>      <span class="p">}]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Value Mapping]]></title>
    <link href="http://blog.prime31.com/simple-value-mapping"/>
    <updated>2015-01-16T11:53:46-08:00</updated>
    <id>http://blog.prime31.com/simple-value-mapping</id>
    <content type="html"><![CDATA[<p>This post is a quick one that covers a technique that I use all over the place: mapping a value from one range to a completely different range. Uses include everything from a simple health bar to mesh deformation to UI layout to shader vertex mods and tons more.</p>

<!-- more -->


<p>Lets say you want to show health bars for all the enemies or players in your game. The health of each varies from 10 for weaker enemies up to 200 for bosses. Whenever the health changes you want to update the health bar in the UI. This is where value mapping comes in handy. Most UI elements (and many other value-based scenarios) map from 0 to 1. The max health of your entities varies so you need a simple way to map that back to the 0 to 1 range.</p>

<h2>Mapping Health Value to UI Value</h2>

<p><img src="http://blog.prime31.com/images/posts/valueMapping/health-map.png" alt="" /></p>

<p>Mapping to the 0 to 1 range is pretty simple. The map01 method below shows how to do it. For the case presented in the screenshot the entity health is approximately 70. Running that through the <code>map01</code> method (code is below) like so <code>map01( 70f, 0f, 250f )</code> results in a value of 0.28f.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// Maps a value from some arbitrary range to the 0 to 1 range</span>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="kt">float</span> <span class="nf">map01</span><span class="p">(</span> <span class="kt">float</span> <span class="k">value</span><span class="p">,</span> <span class="kt">float</span> <span class="n">min</span><span class="p">,</span> <span class="kt">float</span> <span class="n">max</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span> <span class="k">value</span> <span class="p">-</span> <span class="n">min</span> <span class="p">)</span> <span class="p">*</span> <span class="m">1f</span> <span class="p">/</span> <span class="p">(</span> <span class="n">max</span> <span class="p">-</span> <span class="n">min</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>map01</code> method is just a reduction of a full value mapping method. The <code>map</code> method below allows you to not only map to the 0 to 1 range but expands the idea to allow mapping to any arbitrary range.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// Maps a value from ome arbitrary range to another arbitrary range</span>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="kt">float</span> <span class="nf">map</span><span class="p">(</span> <span class="kt">float</span> <span class="k">value</span><span class="p">,</span> <span class="kt">float</span> <span class="n">leftMin</span><span class="p">,</span> <span class="kt">float</span> <span class="n">leftMax</span><span class="p">,</span> <span class="kt">float</span> <span class="n">rightMin</span><span class="p">,</span> <span class="kt">float</span> <span class="n">rightMax</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">rightMin</span> <span class="p">+</span> <span class="p">(</span> <span class="k">value</span> <span class="p">-</span> <span class="n">leftMin</span> <span class="p">)</span> <span class="p">*</span> <span class="p">(</span> <span class="n">rightMax</span> <span class="p">-</span> <span class="n">rightMin</span> <span class="p">)</span> <span class="p">/</span> <span class="p">(</span> <span class="n">leftMax</span> <span class="p">-</span> <span class="n">leftMin</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>With the ability to map from one range to any other range you can start to do some interesting things. If you read the <a href="http://blog.prime31.com/grass2d/">Interactive 2D Foliage post</a>, you may have noticed it actually used the <code>map</code> method to handle bending the foliage. In this particular use case we want to know how far our player moved into a trigger collider and then map that to a range of -1 to 1. We use the mapped -1 to 1 value to decide how far we will bend the foliage verts. Here is the relevant code snippet:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// figure out how far we have moved into the trigger and then map the offset to -1 to 1.</span>
</span><span class='line'><span class="c1">// 0 would be neutral, -1 to the left and +1 to the right.</span>
</span><span class='line'><span class="kt">var</span> <span class="n">offset</span> <span class="p">=</span> <span class="n">col</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">x</span> <span class="p">-</span> <span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'><span class="kt">var</span> <span class="n">radius</span> <span class="p">=</span> <span class="n">_colliderHalfWidth</span> <span class="p">+</span> <span class="n">col</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">x</span> <span class="p">*</span> <span class="m">0.5f</span><span class="p">;</span>
</span><span class='line'><span class="kt">var</span> <span class="n">mappedOffset</span> <span class="p">=</span> <span class="n">map</span><span class="p">(</span> <span class="n">offset</span><span class="p">,</span> <span class="p">-</span><span class="n">radius</span><span class="p">,</span> <span class="n">radius</span><span class="p">,</span> <span class="p">-</span><span class="m">1f</span><span class="p">,</span> <span class="m">1f</span> <span class="p">);</span>
</span><span class='line'><span class="n">setVertHorizontalOffset</span><span class="p">(</span> <span class="n">mappedOffset</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Garbage Collection and How to Avoid It]]></title>
    <link href="http://blog.prime31.com/recyclerkit"/>
    <updated>2015-01-05T17:16:05-08:00</updated>
    <id>http://blog.prime31.com/recycler-kit</id>
    <content type="html"><![CDATA[<p>Managed languages (like C#) have often been touted as the panacea of programming. We no longer need to be concerned with memory management. Memory leaks are a thing of the past. Retain/release/delete is banashed to the bowels of hell. The garbage collector (GC from here on out) will take care of all the ugly details of memory management for us.</p>

<!-- more -->


<p>The reality of the situtation is that we almost need to be <em>even more careful</em> in a managed environment. All control of memory management is now out of our hands and we have no choice but to deal with the GC and its madness. To make matters even worse, Unity ships with an <strong>absolutely ancient</strong> GC. If you are making a mobile game it will undoubtedly end up being a battle with the GC.</p>

<h2>So, What Actually Happens at Runtime?</h2>

<p>In simplified terms, as you allocate more and more memory eventually the GC gets to its limit and it kicks in a collection. While the GC is collecting everything freezes until it is complete. On desktop platforms it isn&rsquo;t terrible as long as you have a couple milliseconds per frame to spare. On mobile and most consoles it is a guaranteed frame rate stutter. If you continue to allocate every frame you end up with endless stutters.</p>

<h2>What Causes Allocations?</h2>

<p>From all of the code I have seen, the main culprits are calling Instantiate at runtime and senseless string usage. There are plenty of other sources but these are the two biggest offenders. Conveniently, these happen to also be completely under our own control. We already touched on strings with the <a href="http://blog.prime31.com/constants-generator-kit/">ConstantsGeneratorKit post</a> so give that a look if you haven&rsquo;t seen it yet. Abolishing Instantiate calls requires a bit more foresight and some discipline. It is just too easy to stick calls to Instantiate in our code sometimes. What we need is a solution that is just as simple as Instantiate/Destroy.</p>

<h2>Enter Object Pools</h2>

<p>What is an object pool (as defined by <a href="http://stackoverflow.com/users/37213/duffymo">duffymo</a>)?</p>

<blockquote><p>&ldquo;An object pool is a collection of a particular object that an application will create and keep on hand for those situations where creating each instance is expensive.&rdquo;</p></blockquote>

<p>What this boils down to for a Unity game is that we do all of our Instantiate calls at level load time. Object pools are the tool that we use to do this. There are plenty of tutorials and sample code including a great video right on the <a href="http://unity3d.com/learn/tutorials/modules/beginner/live-training-archive/object-pooling">Unity Learn website</a>. As is the case with all of the core feature tools we also have an open source object pool available in our *Kit family.</p>

<h2>RecyclerKit</h2>

<p><img src="http://blog.prime31.com/images/posts/garbageCollector/RecyclerKitInspector.png" alt="" /> <a href="https://github.com/prime31/RecyclerKit">RecyclerKit</a> aims to take the pain out of using an object pool. It includes a simple inspector that lets you drag-and-drop any prefab or GameObject in your scene to create an object pool. From there, you just replace your Instantiate calls with <code>TrashMan.spawn</code> and replace your Destroy calls with <code>TrashMan.despawn/despawnAfterDelay</code>. Of course, not everyone wants to use the inspector and sometimes you don&rsquo;t know what you want to stick in an object pool until runtime so you can create your recycle bins anytime. Below is a snippet showing how to create and use a recycle bin at runtime:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// create a new recycle bin</span>
</span><span class='line'><span class="kt">var</span> <span class="n">recycleBin</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TrashManRecycleBin</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">prefab</span> <span class="p">=</span> <span class="n">somePrefabOrGameObjectReference</span>
</span><span class='line'>    <span class="c1">// any other options can be placed here</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="n">TrashMan</span><span class="p">.</span><span class="n">manageRecycleBin</span><span class="p">(</span> <span class="n">recycleBin</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// usage is the same as with a recycle bin created with the inspector</span>
</span><span class='line'><span class="kt">var</span> <span class="n">newObj</span> <span class="p">=</span> <span class="n">TrashMan</span><span class="p">.</span><span class="n">spawn</span><span class="p">(</span> <span class="n">somePrefabOrGameObjectReference</span> <span class="p">);</span>
</span><span class='line'><span class="n">TrashMan</span><span class="p">.</span><span class="n">despawnAfterDelay</span><span class="p">(</span> <span class="n">newObj</span><span class="p">,</span> <span class="m">5f</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>All the options we have ever needed over the last couple years have been added so RecyclerKit should cover just about all use cases. Options include the total number of objects to preallocate, total objects to create if we hit the recycle bin limit, automatically recycle ParticleSystems (based on system.duration + system.startLifetime), use a hard limit (do not allocate any objects once the recycle bin is empty) and automatic culling (destroy instances above a certain amount). Go grab a copy and avoid the GC monster in your games!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interactive 2D Foliage]]></title>
    <link href="http://blog.prime31.com/grass2d"/>
    <updated>2014-12-19T14:45:21-08:00</updated>
    <id>http://blog.prime31.com/grass2d</id>
    <content type="html"><![CDATA[<p>Having interactive foliage in your game helps bring some life to your environment. It makes everything feel more alive. There are lots of different ways to handle interactive foliage. The easiest way is to stick a trigger collider on your GameObject. When the player hits the trigger just move it back and forth on the x-axis. In this post we will go over how to kick that up a notch.</p>

<!-- more -->


<p>If you read the <a href="http://blog.prime31.com/water2d-part1">Modeling 2D Water with Springs</a> posts, you will know that I love springs. For that reason we are going to model our grass with a spring. The first approach I took when making interactive foliage was to handle all the animation in the vertex shader. With Unity that will break batching so I had to fall back to the method detailed in this post.</p>

<h2>Handling Collision</h2>

<p>The first thing we need is a trigger collider. You can use a BoxCollider2D or a CircleCollider2D. When the player enters the collider we take note of the <em>_enterOffset</em> which is just the distance between the player collider and the foliage collider. We need the <em>_enterOffset</em> so that we don&rsquo;t start bending the foliage until the player has passed the midpoint of the foliage. Things don&rsquo;t start bending until you are dragging them past their resting position. That&rsquo;s just how the world works.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">void</span> <span class="nf">OnTriggerEnter2D</span><span class="p">(</span> <span class="n">Collider2D</span> <span class="n">col</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="n">col</span><span class="p">.</span><span class="n">gameObject</span><span class="p">.</span><span class="n">layer</span> <span class="p">==</span> <span class="n">k</span><span class="p">.</span><span class="n">Layers</span><span class="p">.</span><span class="n">PLAYER</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">_enterOffset</span> <span class="p">=</span> <span class="n">col</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">x</span> <span class="p">-</span> <span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We will use OnTriggerStay2D to keep track of the player + foliage interaction. Once the player has moved past the midpoint (offset and _enterOffset will have opposite signs) we set some flags and start to bend the foliage. Bending the foliage is done by just sliding the top 2 verts of the foliage quad back and forth. At this point, the foliage bend is entirely based on the position of the player.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">void</span> <span class="nf">OnTriggerStay2D</span><span class="p">(</span> <span class="n">Collider2D</span> <span class="n">col</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="n">col</span><span class="p">.</span><span class="n">gameObject</span><span class="p">.</span><span class="n">layer</span> <span class="p">==</span> <span class="n">k</span><span class="p">.</span><span class="n">Layers</span><span class="p">.</span><span class="n">PLAYER</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">offset</span> <span class="p">=</span> <span class="n">col</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">x</span> <span class="p">-</span> <span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="n">_isBending</span> <span class="p">||</span> <span class="n">Mathf</span><span class="p">.</span><span class="n">Sign</span><span class="p">(</span> <span class="n">_enterOffset</span> <span class="p">)</span> <span class="p">!=</span> <span class="n">Mathf</span><span class="p">.</span><span class="n">Sign</span><span class="p">(</span> <span class="n">offset</span> <span class="p">)</span> <span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="n">_isRebounding</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>          <span class="n">_isBending</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>          <span class="c1">// figure out how far we have moved into the trigger and then map the offset to -1 to 1.</span>
</span><span class='line'>          <span class="c1">// 0 would be neutral, -1 to the left and +1 to the right.</span>
</span><span class='line'>          <span class="kt">var</span> <span class="n">radius</span> <span class="p">=</span> <span class="n">_colliderHalfWidth</span> <span class="p">+</span> <span class="n">col</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">x</span> <span class="p">*</span> <span class="m">0.5f</span><span class="p">;</span>
</span><span class='line'>          <span class="n">_exitOffset</span> <span class="p">=</span> <span class="n">map</span><span class="p">(</span> <span class="n">offset</span><span class="p">,</span> <span class="p">-</span><span class="n">radius</span><span class="p">,</span> <span class="n">radius</span><span class="p">,</span> <span class="p">-</span><span class="m">1f</span><span class="p">,</span> <span class="m">1f</span> <span class="p">);</span>
</span><span class='line'>          <span class="n">setVertHorizontalOffset</span><span class="p">(</span> <span class="n">_exitOffset</span> <span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// simple method to offset the top 2 verts of a quad based on the offset and BEND_FACTOR constant</span>
</span><span class='line'><span class="k">void</span> <span class="nf">setVertHorizontalOffset</span><span class="p">(</span> <span class="kt">float</span> <span class="n">offset</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">verts</span> <span class="p">=</span> <span class="n">_meshFilter</span><span class="p">.</span><span class="n">mesh</span><span class="p">.</span><span class="n">vertices</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">verts</span><span class="p">[</span><span class="m">1</span><span class="p">].</span><span class="n">x</span> <span class="p">=</span> <span class="m">0.5f</span> <span class="p">+</span> <span class="n">offset</span> <span class="p">*</span> <span class="n">BEND_FACTOR</span> <span class="p">/</span> <span class="n">transform</span><span class="p">.</span><span class="n">localScale</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>  <span class="n">verts</span><span class="p">[</span><span class="m">3</span><span class="p">].</span><span class="n">x</span> <span class="p">=</span> <span class="p">-</span><span class="m">0.5f</span> <span class="p">+</span> <span class="n">offset</span> <span class="p">*</span> <span class="n">BEND_FACTOR</span> <span class="p">/</span> <span class="n">transform</span><span class="p">.</span><span class="n">localScale</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">_meshFilter</span><span class="p">.</span><span class="n">mesh</span><span class="p">.</span><span class="n">vertices</span> <span class="p">=</span> <span class="n">verts</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Bounceback Oscillation</h2>

<p>Once the player exits the trigger the spring takes over and it will handle simulating the foliage oscillation (springs are the best!). We apply a force to the spring and let it do its thing. Here the <em>_isRebounding</em> flag is set which lets the spring know to take over (that is all handled in the Update method). When the spring acceleration dies down the oscillation is stopped. This is done as an optimization. There is no reason to continously update the mesh vertices for movements too small to see. You can the result in the video below the code block.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">void</span> <span class="nf">OnTriggerExit2D</span><span class="p">(</span> <span class="n">Collider2D</span> <span class="n">col</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="n">col</span><span class="p">.</span><span class="n">gameObject</span><span class="p">.</span><span class="n">layer</span> <span class="p">==</span> <span class="n">k</span><span class="p">.</span><span class="n">Layers</span><span class="p">.</span><span class="n">PLAYER</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="n">_isBending</span> <span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="c1">// apply a force in the opposite direction that we are currently bending</span>
</span><span class='line'>          <span class="n">_spring</span><span class="p">.</span><span class="n">applyForceStartingAtPosition</span><span class="p">(</span> <span class="n">BEND_FORCE_ON_EXIT</span> <span class="p">*</span> <span class="n">Mathf</span><span class="p">.</span><span class="n">Sign</span><span class="p">(</span> <span class="n">_exitOffset</span> <span class="p">),</span> <span class="n">_exitOffset</span> <span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">_isBending</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>      <span class="n">_isRebounding</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">void</span> <span class="nf">Update</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="n">_isRebounding</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="n">setVertHorizontalOffset</span><span class="p">(</span> <span class="n">_spring</span><span class="p">.</span><span class="n">simulate</span><span class="p">()</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// apply the spring until its acceleration dies down</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="n">Mathf</span><span class="p">.</span><span class="n">Abs</span><span class="p">(</span> <span class="n">_spring</span><span class="p">.</span><span class="n">acceleration</span> <span class="p">)</span> <span class="p">&lt;</span> <span class="m">0.00005f</span> <span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="c1">// reset to 0 which is neutral</span>
</span><span class='line'>          <span class="n">setVertHorizontalOffset</span><span class="p">(</span> <span class="m">0f</span> <span class="p">);</span>
</span><span class='line'>          <span class="n">_isRebounding</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<iframe src="http://gfycat.com/ifr/JampackedForcefulAphid" frameborder="0" scrolling="no" width="752" height="302" style="-webkit-backface-visibility: hidden;-webkit-transform: scale(1);" ></iframe>


<h2>Adding Wind</h2>

<p>What we have now is a firm base: interactive foliage and a configurable spring system to give it some life. Adding something like a wind force is super easy. All we have to do is use a sin wave to vary the wind and apply the force to the spring.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// addition to the Update method to add a wind force</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span> <span class="n">isWindEnabled</span> <span class="p">&amp;&amp;</span> <span class="p">!</span><span class="n">_isBending</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">windForce</span> <span class="p">=</span> <span class="n">baseWindForce</span> <span class="p">+</span> <span class="n">Mathf</span><span class="p">.</span><span class="n">Pow</span><span class="p">(</span> <span class="n">Mathf</span><span class="p">.</span><span class="n">Sin</span><span class="p">(</span> <span class="n">Time</span><span class="p">.</span><span class="n">time</span> <span class="p">*</span> <span class="n">windPeriod</span> <span class="p">+</span> <span class="n">_windOffset</span> <span class="p">)</span> <span class="p">*</span> <span class="m">0.7f</span> <span class="p">+</span> <span class="m">0.05f</span><span class="p">,</span> <span class="m">4</span> <span class="p">)</span> <span class="p">*</span> <span class="m">0.05f</span> <span class="p">*</span> <span class="n">windForceMultiplier</span><span class="p">;</span>
</span><span class='line'>  <span class="n">_spring</span><span class="p">.</span><span class="n">applyAdditiveForce</span><span class="p">(</span> <span class="n">windForce</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// we only simulate if we are not rebounding. While rebounding the simulation will occur in the next block</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="p">!</span><span class="n">_isRebounding</span> <span class="p">)</span>
</span><span class='line'>      <span class="n">setVertHorizontalOffset</span><span class="p">(</span> <span class="n">_spring</span><span class="p">.</span><span class="n">simulate</span><span class="p">()</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<iframe src="http://gfycat.com/ifr/SelfassuredJitteryKinkajou" frameborder="0" scrolling="no" width="752" height="302" style="-webkit-backface-visibility: hidden;-webkit-transform: scale(1);" ></iframe>


<h2>Jumping Interactions</h2>

<p>The last piece of extra polish we can add is to make our foliage part when we jump. This is also a simple addition due to the solid base we have already set. We just need to detect when the player jumps into the foliage and apply a force to the spring. We use the positions of the player and foliage to see if we should apply the force to the left or right. Nice and simple.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="c1">// addition to the OnTriggerEnter2D method to handle jumping into the foliage</span>
</span><span class='line'><span class="k">if</span><span class="p">(</span> <span class="n">col</span><span class="p">.</span><span class="n">GetComponent</span><span class="p">&lt;</span><span class="n">Player</span><span class="p">&gt;().</span><span class="n">velocity</span><span class="p">.</span><span class="n">y</span> <span class="p">&lt;</span> <span class="p">-</span><span class="m">3f</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// apply a force in the proper direction based on where we impacted</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="n">col</span><span class="p">.</span><span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">x</span> <span class="p">&lt;</span> <span class="n">transform</span><span class="p">.</span><span class="n">position</span><span class="p">.</span><span class="n">x</span> <span class="p">)</span>
</span><span class='line'>      <span class="n">_spring</span><span class="p">.</span><span class="n">applyAdditiveForce</span><span class="p">(</span> <span class="n">BEND_FORCE_ON_EXIT</span> <span class="p">);</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>      <span class="n">_spring</span><span class="p">.</span><span class="n">applyAdditiveForce</span><span class="p">(</span> <span class="p">-</span><span class="n">BEND_FORCE_ON_EXIT</span> <span class="p">);</span>
</span><span class='line'>  <span class="n">_isRebounding</span> <span class="p">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<iframe src="http://gfycat.com/ifr/MetallicRichDunnart" frameborder="0" scrolling="no" width="752" height="302" style="-webkit-backface-visibility: hidden;-webkit-transform: scale(1);" ></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ConstantsGeneratorKit: Killing Naked Strings So You Don't Have To]]></title>
    <link href="http://blog.prime31.com/constants-generator-kit"/>
    <updated>2014-12-05T19:12:12-08:00</updated>
    <id>http://blog.prime31.com/constants-generator-kit</id>
    <content type="html"><![CDATA[<p>Killing naked strings? What the heck does that even mean? If you have ever worked on a large project with a medium-to-large sized team you will know exactly what I am talking about. How many times have you seen brittle code like this <code>GameObject.FindWithTag( "SpawnPoint" )</code> or this <code>someGameObject.tag == "Enemy"</code>? Those strings are naked and afraid and they will come back to haunt you later.</p>

<!-- more -->


<h3>The Problem(s) Defined</h3>

<p>For the purposes of this discussion we will define a <em>naked string</em> as any string that is not declared as a constant. That means anytime you start typing a quote (&ldquo;) in your code you are making a naked string and causing problems for future you or the rest of your team. Let&rsquo;s say, for example, you are comparing GameObject.tag to naked strings as in the first paragraph. What happens if you want to change the tag from &#8220;Enemy&rdquo; to &ldquo;Tank&rdquo;? You then have to search your project and hope that you find all the places where you used the &ldquo;Enemy&rdquo; string. The worst part is that bugs like this are <strong>very</strong> hard to track down.</p>

<h3>The (Dead Simple) Solution</h3>

<p>There are various ways to solve this problem. The most common is constant string properties/fields in classes. As long as you are diligent and make sure that you always remember to update the strings when you change your tags, all will be well. We all know that isn&rsquo;t happening though. Either you or somebody else will change something and forget to update the string. Good luck tracking that bug down.</p>

<p>Enter ConstantsGeneratorKit: the solution to naked strings. As an added benefit, it will also solve your naked layer ints, naked scene names and the worst offender of them all: naked resource paths. You can find ConstantsGeneratorKit on <a href="https://github.com/prime31/ConstantsGeneratorKit">GitHub</a>. It&rsquo;s a single script. Stick it in a folder named Editor somewhere in your project. That&rsquo;s it. ConstantsGeneratorKit will wait for changes in scenes, layers, tags and resources then generate classes with all the strings and ints setup as <em>const</em>. Yup. That means you get autocomplete for all of them. Just type <code>k.</code> and bask in the glory (by default ConstantsGeneratorKit stick everything in the &ldquo;k&rdquo; namespace for easy access but you can configure that and other options right in the file.) Below are examples of the 4 classes that ConstantsGeneratorKit generates automatically.</p>

<h3>Tags.cs</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">namespace</span> <span class="nn">k</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">Tags</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">EDITOR_ONLY</span> <span class="p">=</span> <span class="s">&quot;EditorOnly&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">MAIN_CAMERA</span> <span class="p">=</span> <span class="s">&quot;MainCamera&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">PLAYER</span> <span class="p">=</span> <span class="s">&quot;Player&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Layers.cs</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">namespace</span> <span class="nn">k</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">Layers</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">DEFAULT</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">TRANSPARENT_FX</span> <span class="p">=</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">IGNORE_RAYCAST</span> <span class="p">=</span> <span class="m">2</span><span class="p">;</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">WATER</span> <span class="p">=</span> <span class="m">4</span><span class="p">;</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">UI</span> <span class="p">=</span> <span class="m">5</span><span class="p">;</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">PLAYER</span> <span class="p">=</span> <span class="m">8</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      <span class="k">public</span> <span class="k">static</span> <span class="kt">int</span> <span class="nf">onlyIncluding</span><span class="p">(</span> <span class="k">params</span> <span class="kt">int</span><span class="p">[]</span> <span class="n">layers</span> <span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">mask</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>          <span class="k">for</span><span class="p">(</span> <span class="kt">var</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">layers</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="n">i</span><span class="p">++</span> <span class="p">)</span>
</span><span class='line'>              <span class="n">mask</span> <span class="p">|=</span> <span class="p">(</span> <span class="m">1</span> <span class="p">&lt;&lt;</span> <span class="n">layers</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">return</span> <span class="n">mask</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      <span class="k">public</span> <span class="k">static</span> <span class="kt">int</span> <span class="nf">everythingBut</span><span class="p">(</span> <span class="k">params</span> <span class="kt">int</span><span class="p">[]</span> <span class="n">layers</span> <span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="p">~</span><span class="n">onlyIncluding</span><span class="p">(</span> <span class="n">layers</span> <span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Scenes.cs</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">namespace</span> <span class="nn">k</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">Scenes</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">LEVEL_ONE</span> <span class="p">=</span> <span class="s">&quot;LevelOne&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">LEVEL_TWO</span> <span class="p">=</span> <span class="s">&quot;LevelTwo&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">LEVEL_THREE</span> <span class="p">=</span> <span class="s">&quot;LevelThree&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">public</span> <span class="k">const</span> <span class="kt">int</span> <span class="n">TOTAL_SCENES</span> <span class="p">=</span> <span class="m">3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>      <span class="k">public</span> <span class="k">static</span> <span class="kt">int</span> <span class="nf">nextSceneIndex</span><span class="p">()</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span> <span class="n">UnityEngine</span><span class="p">.</span><span class="n">Application</span><span class="p">.</span><span class="n">loadedLevel</span> <span class="p">+</span> <span class="m">1</span> <span class="p">==</span> <span class="n">TOTAL_SCENES</span> <span class="p">)</span>
</span><span class='line'>              <span class="k">return</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">UnityEngine</span><span class="p">.</span><span class="n">Application</span><span class="p">.</span><span class="n">loadedLevel</span> <span class="p">+</span> <span class="m">1</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Resources.cs</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">namespace</span> <span class="nn">k</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">Resources</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">LAND_POOF</span> <span class="p">=</span> <span class="s">&quot;LandPoof&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">BLOOD_BIT</span> <span class="p">=</span> <span class="s">&quot;SubFolder/BloodBit&quot;</span><span class="p">;</span>
</span><span class='line'>      <span class="k">public</span> <span class="k">const</span> <span class="kt">string</span> <span class="n">EXCLAMATION</span> <span class="p">=</span> <span class="s">&quot;SubFolder/Exclamation&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modeling 2D Water With Springs: Part 2]]></title>
    <link href="http://blog.prime31.com/water2d-part2"/>
    <updated>2014-12-01T22:09:42-08:00</updated>
    <id>http://blog.prime31.com/water2d-part2</id>
    <content type="html"><![CDATA[<p>In part 1, all the groundwork for setting up the water simulation was laid. We have springs attached to the top verts of the water plane, which always want to remain in their neutral position. Once a force is applied to the springs they will oscillate back and forth based on the dampening and tension constants that are passed in.</p>

<!-- more -->


<p>At this point we have a Mesh (with a handy BoxCollider2D making it super easy to position and shape the water plane in the editor) and our WaterColumn struct ready to go, but nothing is happening yet. We need to implement an Update method and start applying some forces to the springs. There are different ways to get creative with this part so I&rsquo;ll just touch on this particular implementation. Right now the springs don&rsquo;t affect each other at all, which would make the water look pretty silly if we applied a force to any of our springs. We need to take into account what our neighbor springs are doing. Are the neighbor springs above or below the current spring? If so, apply a force in that direction based on how far it is from the current spring times some made up constant. Something like this (which shows only the spring to our right): <code>spring[i].velocity += konstant * ( spring[i].currentHeight - spring[i+1].currentHeight)</code>.</p>

<p>The final piece of the simulation is detecting when something falls in the water and applying an appropriate force. This is where our BoxCollider2D (which is set as a trigger) comes in handy. We use OnTriggerEnter2D to detect anything hitting the water, then use its velocity and mass to affect our springs. <img src="http://blog.prime31.com/images/posts/water2d/splash.png" alt="" /> The easy way to do this is to just find the nearest spring and apply the force to that spring. We don&rsquo;t take the easy way out here though so we are going to do this the right way. What we will do is use the Bounds of the object that fell in the water to determine exactly which springs should be affected. Additionally, if the object falls between all of our springs (this happens with small objects on mobile sometimes) we just grab the 2 closest springs and apply the force to them. Once we&rsquo;ve found all the affected springs, we first divide the force by the affected spring count. This will spread out the force. We then apply it to each spring by adding to its velocity.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">splash</span><span class="p">(</span> <span class="n">Bounds</span> <span class="n">bounds</span><span class="p">,</span> <span class="kt">float</span> <span class="n">velocity</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// snip: setup code...</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// find all our springs within the bounds</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">xMin</span> <span class="p">=</span> <span class="n">bounds</span><span class="p">.</span><span class="n">min</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">var</span> <span class="n">xMax</span> <span class="p">=</span> <span class="n">bounds</span><span class="p">.</span><span class="n">max</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span> <span class="kt">var</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">_columns</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="n">i</span><span class="p">++</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span> <span class="n">_columns</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">xPosition</span> <span class="p">&gt;</span> <span class="n">xMin</span> <span class="p">&amp;&amp;</span> <span class="n">_columns</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">xPosition</span> <span class="p">&lt;</span> <span class="n">xMax</span> <span class="p">)</span>
</span><span class='line'>          <span class="n">_touchedColumnIndices</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span> <span class="n">i</span> <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// if we have no hits we should loop back through and find the 2 closest verts and use them</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span> <span class="n">_touchedColumnIndices</span><span class="p">.</span><span class="n">Count</span> <span class="p">==</span> <span class="m">0</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="k">for</span><span class="p">(</span> <span class="kt">var</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">_columns</span><span class="p">.</span><span class="n">Length</span><span class="p">;</span> <span class="n">i</span><span class="p">++</span> <span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>          <span class="c1">// widen our search to included divisitionWidth padding on each side so we definitely get a couple hits</span>
</span><span class='line'>          <span class="k">if</span><span class="p">(</span> <span class="n">_columns</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">xPosition</span> <span class="p">+</span> <span class="n">_divisionWidth</span> <span class="p">&gt;</span> <span class="n">xMin</span> <span class="p">&amp;&amp;</span> <span class="n">_columns</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">xPosition</span> <span class="p">-</span> <span class="n">_divisionWidth</span> <span class="p">&lt;</span> <span class="n">xMax</span> <span class="p">)</span>
</span><span class='line'>              <span class="n">_touchedColumnIndices</span><span class="p">.</span><span class="n">Add</span><span class="p">(</span> <span class="n">i</span> <span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// snip: updating velocity on affected WaterColumns and optionally spawning a splash prefab</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s all there is to the simulation. There is still more we can do to make it look better. The first gif showed what the water looks like with minimal springs/verts and only simple vertex colors. That is the low-end version of the water. Adding a refraction shader would give it a pretty neat look. You could also apply a blur shader that moves around and varies itself over time. The gif below uses a displacement map with a GrabPass to provide a bit of life to the water. Unfortunately, the low quality gif doesn&rsquo;t let you see the true beauty of the effect.</p>

<iframe src="http://gfycat.com/ifr/FreshGroundedAmericanmarten" frameborder="0" scrolling="no" width="846" height="478" style="-webkit-backface-visibility: hidden;-webkit-transform: scale(1);" ></iframe>


<p>Here is a snippet showing what this simple displacement shader is doing. The first pass of the shader is a GrabPass into the <em>GrabTexture. </em>DispTex is just a Texture2D of some noise. Playing around with different displacement textures ends up producing a variety of different looks with relative ease.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">half4</span> <span class="nf">frag</span><span class="p">(</span> <span class="n">v2f</span> <span class="n">i</span> <span class="p">)</span> <span class="p">:</span> <span class="n">COLOR</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">float2</span> <span class="n">displacement</span> <span class="p">=</span> <span class="n">tex2D</span><span class="p">(</span> <span class="n">_DispTex</span><span class="p">,</span> <span class="n">i</span><span class="p">.</span><span class="n">grabUV</span> <span class="p">/</span> <span class="m">6.0</span> <span class="p">).</span><span class="n">xy</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">t</span> <span class="p">=</span> <span class="n">i</span><span class="p">.</span><span class="n">grabUV</span><span class="p">.</span><span class="n">y</span> <span class="p">+</span> <span class="n">displacement</span><span class="p">.</span><span class="n">y</span> <span class="p">*</span> <span class="m">0.1</span> <span class="p">-</span> <span class="m">0.07</span> <span class="p">+</span> <span class="p">(</span> <span class="n">sin</span><span class="p">(</span> <span class="n">i</span><span class="p">.</span><span class="n">grabUV</span><span class="p">.</span><span class="n">x</span> <span class="p">*</span> <span class="m">6.0</span> <span class="p">+</span> <span class="n">_Time</span><span class="p">.</span><span class="n">y</span> <span class="p">)</span> <span class="p">*</span> <span class="m">0.005</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nf">tex2D</span><span class="p">(</span> <span class="n">_GrabTexture</span><span class="p">,</span> <span class="n">float2</span><span class="p">(</span> <span class="n">i</span><span class="p">.</span><span class="n">grabUV</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">t</span> <span class="p">)</span> <span class="p">)</span> <span class="p">*</span> <span class="p">(</span> <span class="n">i</span><span class="p">.</span><span class="n">color</span> <span class="p">*</span> <span class="m">3.0</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modeling 2D Water With Springs: Part 1]]></title>
    <link href="http://blog.prime31.com/water2d-part1"/>
    <updated>2014-11-28T17:16:05-08:00</updated>
    <id>http://blog.prime31.com/water2d-part1</id>
    <content type="html"><![CDATA[<p>Water is one of those things in the world of game development that can range anywhere from incredibly simple to insanely complex. Your first attempt at making water might not be anything more than a transparent quad. Compare a solution like that with something like the water as seen in <a href="https://www.google.com/search?q=Assassin%27s+Creed+IV:+Black+Flag+water&amp;tbm=isch">Assassin&rsquo;s Creed IV: Black Flag</a> or <a href="https://www.google.com/search?q=bioshock+water&amp;tbm=isch">Bioshock</a> to get an idea of how far it can be taken.</p>

<!-- more -->


<p>Even with something like 2D water there are tons of different ways to model it. For the project this water was made for (which is for mobile and desktop) I chose to model the water with springs. This provides a fun looking water that is easy to configure at runtime keeping it performant on mobile and pretty on desktop. Before we get into any details lets have a look at what the water looks like for low end mobile devices.</p>

<div>
<iframe src="//gfycat.com/ifr/HelpfulThickGopher" frameborder="0" scrolling="no" width="846" height="476" style="-webkit-backface-visibility: hidden;" ></iframe>
</div>


<p>The plan is to utilize our good friend from back in grade school: Hooke&rsquo;s Law. If we layout a series of springs all in a vertical direction we can use them to simulate the oscillating water surface that you see above. <img src="http://blog.prime31.com/images/posts/water2d/verts.png" alt="" /> We will of course need a mesh to go along with our invisible springs so we will use the spring&rsquo;s position as our top vert. What we end up with is a line of verts each with a spring to simulate the water surface. With that in place, making the mesh is simple: we just stick a vert below each spring (off the bottom of the image on the left) and we break up each square into two triangles. To provide a visual when working in the editor a BoxCollider2D is used. This also has the added benefit of giving us its Bounds property so we know exactly where the top, bottom, left and right verts will be. We will need it at runtime to detect stuff falling into the water as well.</p>

<p>I mentioned previously that this method of making water can easily scale from mobile to desktop. This is done by making the number of springs that are used configurable. A lower number isn&rsquo;t as pretty but it is a lot cheaper and faster. At runtime the Mesh created in Awake and the number of springs is set based on the current device. Here are some screenshots from the editor with a gizmo drawn at each spring position:</p>

<h3>20 Springs, 40 Springs and 100 Springs</h3>

<p><img src="http://blog.prime31.com/images/posts/water2d/water20.png" alt="" />
<img src="http://blog.prime31.com/images/posts/water2d/water40.png" alt="" />
<img src="http://blog.prime31.com/images/posts/water2d/water100.png" alt="" /></p>

<p>The WaterColumn struct below is used to keep things organized. It handles calculating a simplified Hooke&rsquo;s Law in its update method and it also stores the index into the Mesh.vertices array where it is located. After running the simulation, the vertexIndex lets us get right to the vert that we need to update.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">struct</span> <span class="nc">WaterColumn</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">float</span> <span class="n">currentHeight</span><span class="p">;</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">float</span> <span class="n">baseHeight</span><span class="p">;</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">float</span> <span class="n">velocity</span><span class="p">;</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">float</span> <span class="n">xPosition</span><span class="p">;</span>
</span><span class='line'>  <span class="k">public</span> <span class="kt">int</span> <span class="n">vertexIndex</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="k">void</span> <span class="nf">update</span><span class="p">(</span> <span class="kt">float</span> <span class="n">dampening</span><span class="p">,</span> <span class="kt">float</span> <span class="n">tension</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">var</span> <span class="n">heightOffset</span> <span class="p">=</span> <span class="n">baseHeight</span> <span class="p">-</span> <span class="n">currentHeight</span><span class="p">;</span>
</span><span class='line'>      <span class="n">velocity</span> <span class="p">+=</span> <span class="n">tension</span> <span class="p">*</span> <span class="n">heightOffset</span> <span class="p">-</span> <span class="n">velocity</span> <span class="p">*</span> <span class="n">dampening</span><span class="p">;</span>
</span><span class='line'>      <span class="n">currentHeight</span> <span class="p">+=</span> <span class="n">velocity</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the next post we will go over the rest of the simulation details and we will get the water actually moving and interactive.</p>
]]></content>
  </entry>
  
</feed>
